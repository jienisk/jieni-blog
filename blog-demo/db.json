{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/anzhiyu/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/512.png","path":"img/512.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/comment_bg.png","path":"img/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/default_cover.jpg","path":"img/default_cover.jpg","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/16.png","path":"img/siteicon/16.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/32.png","path":"img/siteicon/32.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/apple-icon-180.png","path":"img/siteicon/apple-icon-180.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-192.maskable.png","path":"img/siteicon/manifest-icon-192.maskable.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-512.maskable.png","path":"img/siteicon/manifest-icon-512.maskable.png","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/ai_abstract.js","path":"js/anzhiyu/ai_abstract.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/comment_barrage.js","path":"js/anzhiyu/comment_barrage.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/people.js","path":"js/anzhiyu/people.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/random_friends_post.js","path":"js/anzhiyu/random_friends_post.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/anzhiyu/right_click_menu.js","path":"js/anzhiyu/right_click_menu.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/anzhiyu/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/about.yml","hash":"e878cdf60191c76608037ccf3e723c6d4c4e966a","modified":1754252265528},{"_id":"source/_posts/Cloudflare pages 搭建免费图床!.md","hash":"b50d6cb9060c8cccc4fbdda5128270165c04cecf","modified":1754326108015},{"_id":"source/_posts/Web式云端电脑？.md","hash":"7eff7f99d688e060543055e789af7f0d7dc34a0b","modified":1754066184626},{"_id":"source/_posts/hello-world copy.md","hash":"dfa307fa4fbdd1c4d847313bc0fb36ed831a1969","modified":1754066526015},{"_id":"source/_posts/为啥会焦虑？.md","hash":"bf99744926dfac376fb4b6bdf38903799ab86e39","modified":1754041311828},{"_id":"source/_posts/前端知识点心得.md","hash":"5e04b3c4c59338b2ca059b038364e8323b4a7ab5","modified":1756459460594},{"_id":"source/_posts/博客配置.md","hash":"fb3999b30a66c10fdc3b3074c1f98a41d5d19395","modified":1754043431392},{"_id":"source/_posts/常用快捷键.md","hash":"f4f45285ebd1ee179873e24a3ade62f8d8ecf2b0","modified":1755640369747},{"_id":"source/_posts/用户中心管理系统.md","hash":"fdb7a60bdbc6bc53d99799fe1f26888be8db41da","modified":1756403507075},{"_id":"source/about/index.md","hash":"b671ecfaa1f084d4f53dc5be15eba53cc6f76d29","modified":1754252352528},{"_id":"source/categories/index.md","hash":"090305577ed5ef8d9e4995ac9d058af3752a7429","modified":1754041268721},{"_id":"source/tags/index.md","hash":"0d34724f65d1e89128b24cf979e6a202424cbca4","modified":1745777808895},{"_id":"themes/anzhiyu/source/css/_extra/home_top/random-banner.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1740999498367},{"_id":"themes/anzhiyu/.gitignore","hash":"17b9594db1006e57f76e109924db33e54f0f2d87","modified":1740999498314},{"_id":"themes/anzhiyu/LICENSE","hash":"1eba7caf09a39110ad2f542e3ed8700d1a69c6d3","modified":1740999498315},{"_id":"themes/anzhiyu/README.md","hash":"2342370ab20c202c24ee530d80749f158d416fc3","modified":1740999498315},{"_id":"themes/anzhiyu/README_EN.md","hash":"23597148859005cb89e9b6a0be708bf95ae557fb","modified":1740999498315},{"_id":"themes/anzhiyu/_config.yml","hash":"f37684d60a5159e264ff803b61185653748fc22d","modified":1740999498316},{"_id":"themes/anzhiyu/package.json","hash":"a7f83155236c1dd6a309171efaa0680e78afd748","modified":1740999498347},{"_id":"themes/anzhiyu/plugins.yml","hash":"1b66b55771dbac1866909fa306358d11b255821e","modified":1740999498347},{"_id":"themes/anzhiyu/sw-rules.js","hash":"91eb0c94682ce1bffdbbd07a5bb7e5c6e00aa8c6","modified":1740999498407},{"_id":"themes/anzhiyu/languages/en.yml","hash":"824f3a5bfe0f5848cc4a919c183bae214e660242","modified":1740999498316},{"_id":"themes/anzhiyu/languages/default.yml","hash":"8f22a9946744a2a4682564cf2c7e5f8dde6f1c25","modified":1740999498316},{"_id":"themes/anzhiyu/languages/zh-CN.yml","hash":"5f6fad5076023da2d1fae9f5277e081168b0c1eb","modified":1740999498317},{"_id":"themes/anzhiyu/languages/zh-TW.yml","hash":"00d538fc38c1a88fd126c2e57c29dd860e9bc2bd","modified":1740999498317},{"_id":"themes/anzhiyu/layout/archive.pug","hash":"6a61277de07cf2724c865f251cb6f2385a6664ae","modified":1740999498317},{"_id":"themes/anzhiyu/layout/category.pug","hash":"3028789225ac853000b7a84aa3a0715afd7bfb0a","modified":1740999498318},{"_id":"themes/anzhiyu/layout/index.pug","hash":"818aeebcd24466aade30e632ee5275f92e73baea","modified":1740999498346},{"_id":"themes/anzhiyu/layout/page.pug","hash":"57db7a52cbf647256b0346e6c0cd1539732a77e8","modified":1740999498346},{"_id":"themes/anzhiyu/layout/post.pug","hash":"666241d431679ea7f9c94ce345bac8405f6bc5e7","modified":1740999498346},{"_id":"themes/anzhiyu/layout/tag.pug","hash":"fe81f8e8193dae2db7693e5464d4746704bbecdf","modified":1740999498347},{"_id":"themes/anzhiyu/source/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1740999498391},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"1c50c14dd6b66ab636a8852e9b967c40671f1200","modified":1740999498312},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/config.yml","hash":"9d8e5494501458ed1cfeb2eb9e9a57b124dc5010","modified":1740999498312},{"_id":"themes/anzhiyu/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"0aaafd614172a6ca77a9b41fd3e81e885e8cfec7","modified":1740999498312},{"_id":"themes/anzhiyu/.github/workflows/issue_close_question.yml","hash":"a83655836dee52bcec1470bc394aa7dbc2cb487e","modified":1740999498312},{"_id":"themes/anzhiyu/.github/workflows/issue_close_stale.yml","hash":"b7b75a00b86da3b9361d37e5e17926e66e376d13","modified":1740999498313},{"_id":"themes/anzhiyu/.github/workflows/issue_duplicate.yml","hash":"9ce2c4845fd229e7a01d9f61da1c9b1fa0c030ec","modified":1740999498313},{"_id":"themes/anzhiyu/.github/workflows/issue_invalid.yml","hash":"a4f2e5af1651d4683e2988137c7b366f5dc37bdf","modified":1740999498313},{"_id":"themes/anzhiyu/.github/workflows/issue_question.yml","hash":"7a10849dedf026ddcab8b0d3c8205ad6fe5b8327","modified":1740999498313},{"_id":"themes/anzhiyu/.github/workflows/issue_wontfix.yml","hash":"288b1971d78e4e6d284e96d924c87c264737830d","modified":1740999498314},{"_id":"themes/anzhiyu/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1740999498314},{"_id":"themes/anzhiyu/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1740999498314},{"_id":"themes/anzhiyu/layout/includes/404.pug","hash":"799817011e194e6b1fc9ccb5530f5d96d59cfcc0","modified":1740999498319},{"_id":"themes/anzhiyu/layout/includes/additional-js.pug","hash":"5940f3f42d441667ac3ad2ff76b7b9ba79343e9a","modified":1740999498319},{"_id":"themes/anzhiyu/layout/includes/bbTimeList.pug","hash":"e5e64f90df68d2679dd6593b02fb6c64c8ce8620","modified":1740999498320},{"_id":"themes/anzhiyu/layout/includes/categoryGroup.pug","hash":"e08a308acca100cec2ccc086b9c2cff047582fda","modified":1740999498321},{"_id":"themes/anzhiyu/layout/includes/footer.pug","hash":"bcc45f9b91ddaa561fc3239e834381238964aad7","modified":1740999498322},{"_id":"themes/anzhiyu/layout/includes/head.pug","hash":"c1c11b576897466aa5009dc32e884ee9b55162e3","modified":1740999498322},{"_id":"themes/anzhiyu/layout/includes/layout.pug","hash":"9b19516e186b6145441e38ed575eab6c065da001","modified":1740999498325},{"_id":"themes/anzhiyu/layout/includes/mourn.pug","hash":"fec8325d90968ccf376fc87b81671e26ba8fc702","modified":1740999498327},{"_id":"themes/anzhiyu/layout/includes/music.pug","hash":"f45cee9da98d854f78f7fdd8f14c4be427a09d51","modified":1740999498327},{"_id":"themes/anzhiyu/layout/includes/pagination.pug","hash":"7884c6ef7b71dd3f4ebb5a3de2c062d7668b96a5","modified":1740999498330},{"_id":"themes/anzhiyu/layout/includes/rightside.pug","hash":"5462d757964e470d1d7abe0a7ba3d6a9566e0e00","modified":1740999498332},{"_id":"themes/anzhiyu/layout/includes/shortcutKey.pug","hash":"738d2932e68a782be2a80a6af2db1014c272cfe7","modified":1740999498332},{"_id":"themes/anzhiyu/layout/includes/sidebar.pug","hash":"fc56ee028770e230d4705ab74cba054c174ae500","modified":1740999498332},{"_id":"themes/anzhiyu/scripts/events/404.js","hash":"16484d781b273f20c4fbddf27ca283e03d7c0910","modified":1740999498348},{"_id":"themes/anzhiyu/scripts/events/cdn.js","hash":"fec4fbd14b29611684cc5a9ec1ba7a5b8a5cc996","modified":1740999498348},{"_id":"themes/anzhiyu/scripts/events/comment.js","hash":"176332aa4d01728d0bd084e9b02c60167dc307dd","modified":1740999498348},{"_id":"themes/anzhiyu/scripts/events/init.js","hash":"404b1200a3be17dbc14ccbb293aa17389d3a834b","modified":1740999498348},{"_id":"themes/anzhiyu/scripts/events/merge_config.js","hash":"38de538f3398c1be907c91f611344f4cc1009555","modified":1740999498349},{"_id":"themes/anzhiyu/scripts/events/stylus.js","hash":"c4de22ef3e1e84a96f9e48d450b3dbaeb5b85ecf","modified":1740999498349},{"_id":"themes/anzhiyu/scripts/events/welcome.js","hash":"6c3f69381c11fdb651684bcc04c077bcff892a2f","modified":1740999498349},{"_id":"themes/anzhiyu/scripts/filters/post_lazyload.js","hash":"19f85dc094e3d2b72244cc0ef59e60f88373b779","modified":1740999498349},{"_id":"themes/anzhiyu/scripts/filters/random_cover.js","hash":"17497ecec828b68005762d627c54dde42de0806f","modified":1740999498350},{"_id":"themes/anzhiyu/scripts/helpers/aside_archives.js","hash":"12be80b9828008e9dd6aa7f57e875acda88e7046","modified":1740999498350},{"_id":"themes/anzhiyu/scripts/helpers/aside_categories.js","hash":"6e97bc9b99fac73561793bc746e9199636f1cf78","modified":1740999498350},{"_id":"themes/anzhiyu/scripts/helpers/catalog_list.js","hash":"f2ba64e35ee507ecbcaa4a3516ea95f1f7abefac","modified":1740999498350},{"_id":"themes/anzhiyu/scripts/helpers/findArchiveLength.js","hash":"612acfe4fd0d1d86676496dbb8e3e78dba030605","modified":1740999498351},{"_id":"themes/anzhiyu/scripts/helpers/get_version.js","hash":"799ae97c1368c395649444b9e5a71f9074852522","modified":1740999498351},{"_id":"themes/anzhiyu/scripts/helpers/inject_head_js.js","hash":"52f710f99904521c37fc1f19a33929799ceeafe2","modified":1740999498351},{"_id":"themes/anzhiyu/scripts/helpers/page.js","hash":"b0a3c347ae90ac998fa17e9e67b7cd290d4d7ab7","modified":1740999498351},{"_id":"themes/anzhiyu/scripts/helpers/random.js","hash":"feeabd29864fe8a2e50edc4d6c7523897f38aaca","modified":1740999498352},{"_id":"themes/anzhiyu/scripts/helpers/related_post.js","hash":"b6960063129984f1c6760e21c8215a4739fdbac5","modified":1740999498352},{"_id":"themes/anzhiyu/scripts/helpers/sort_attr_post.js","hash":"1cf55b611e4342f5a0c0e26bf69cf2a401cdcfff","modified":1740999498352},{"_id":"themes/anzhiyu/scripts/helpers/tags_page_list.js","hash":"59b5ae1970f4575d8e32309d7b4040fe55acee38","modified":1740999498352},{"_id":"themes/anzhiyu/scripts/helpers/year.js","hash":"94f15ddba7d29cdcc4dd52ed6c35c9c29cc19d37","modified":1740999498353},{"_id":"themes/anzhiyu/scripts/tag/Introduction-card.js","hash":"15d1a82549af21ef55dd40758c16ddf26a17fe22","modified":1740999498353},{"_id":"themes/anzhiyu/scripts/tag/bilibili.js","hash":"cc3f9f29f777dea0e4714ce08be4edb301c0b768","modified":1740999498353},{"_id":"themes/anzhiyu/scripts/tag/btns.js","hash":"84992525efbccb9e87bbc72dfef2968212cabf2e","modified":1740999498353},{"_id":"themes/anzhiyu/scripts/tag/button.js","hash":"8f6d382ea394bef44da90cdf197dd2e207d5c7db","modified":1740999498354},{"_id":"themes/anzhiyu/scripts/tag/checkbox.js","hash":"636cef0f4500a14b123c6b21187fb67989472cbd","modified":1740999498354},{"_id":"themes/anzhiyu/scripts/tag/dogeplayer.js","hash":"facf3251b8eb2fd26f2d78906934d463d0adbd0f","modified":1740999498354},{"_id":"themes/anzhiyu/scripts/tag/flink.js","hash":"f987ce74edeee13a83fe526c234626eeae0588f0","modified":1740999498354},{"_id":"themes/anzhiyu/scripts/tag/folding.js","hash":"93f56903a307b4ce54963b40050fbb9aeb5baf47","modified":1740999498354},{"_id":"themes/anzhiyu/scripts/tag/gallery.js","hash":"3fb27bd4b176b15f2e3a54d452ae4ef922c763d3","modified":1740999498355},{"_id":"themes/anzhiyu/scripts/tag/hide.js","hash":"8c9275fd1a357670a84577306b5e9568ab875a7b","modified":1740999498355},{"_id":"themes/anzhiyu/scripts/tag/iconfont.js","hash":"ea983f7c8dd060ed411044df1c10aa6b72dec34f","modified":1740999498355},{"_id":"themes/anzhiyu/scripts/tag/image.js","hash":"382cae620f3917cc99762942ad40b3ff146216ba","modified":1740999498355},{"_id":"themes/anzhiyu/scripts/tag/inline-labels.js","hash":"eaaedc3d65384e0beb4306534ef4ed202b46da18","modified":1740999498355},{"_id":"themes/anzhiyu/scripts/tag/inlineImg.js","hash":"7641adb0d520c5ff29dd36fc1fb8617c52ecc9fb","modified":1740999498356},{"_id":"themes/anzhiyu/scripts/tag/label.js","hash":"160cce6b5d58187dea0cb907116cda2bbfe6ee1c","modified":1740999498356},{"_id":"themes/anzhiyu/scripts/tag/link.js","hash":"9b7f81107a7c9d887060f6d3309f444090d7ccc3","modified":1740999498356},{"_id":"themes/anzhiyu/scripts/tag/media.js","hash":"ebe4a6ebe34e8d77c0652c63bd5f763439743eb2","modified":1740999498356},{"_id":"themes/anzhiyu/scripts/tag/mermaid.js","hash":"e1a5e8e412cbbb3fc361136e9a5408170b7d93f8","modified":1740999498356},{"_id":"themes/anzhiyu/scripts/tag/note.js","hash":"56a5d41487d74654b75305c5325167a116495900","modified":1740999498357},{"_id":"themes/anzhiyu/scripts/tag/site.js","hash":"b085ab9682b8465b1399c60889283d809a91e980","modified":1740999498357},{"_id":"themes/anzhiyu/scripts/tag/span.js","hash":"89aaa0678188aa85ec18116af4b036f80ca7c073","modified":1740999498357},{"_id":"themes/anzhiyu/scripts/tag/tabs.js","hash":"5dac02bb83aab3ff2afb3317ef7a2a626440671f","modified":1740999498357},{"_id":"themes/anzhiyu/scripts/tag/timeline.js","hash":"4c7056d3cd56f10bd209d2ba4d3cc2027aad1440","modified":1740999498357},{"_id":"themes/anzhiyu/scripts/tag/tip.js","hash":"0c2833f461168fa04c23bfd87f1274976d611fc1","modified":1740999498358},{"_id":"themes/anzhiyu/source/css/index.styl","hash":"10e57f33d5326128dd736135d15c8d46162d27de","modified":1740999498390},{"_id":"themes/anzhiyu/source/css/var.styl","hash":"94afa286f44875f20b7bc1b983069bee0b97058c","modified":1740999498390},{"_id":"themes/anzhiyu/source/img/512.png","hash":"6988b23a31304d9de45b95a1e7c05dd42024e560","modified":1740999498392},{"_id":"themes/anzhiyu/source/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1740999498392},{"_id":"themes/anzhiyu/source/img/comment_bg.png","hash":"91612a887446fb436e9151981e2289f2a426a3e5","modified":1740999498392},{"_id":"themes/anzhiyu/source/img/default_cover.jpg","hash":"455fa65e2736f61ac36360dd4f76fc1ab6a1cdd5","modified":1740999498392},{"_id":"themes/anzhiyu/source/img/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1740999498393},{"_id":"themes/anzhiyu/source/js/main.js","hash":"426ef036cb913ebb2aabe24bac1681757464b47c","modified":1740999498405},{"_id":"themes/anzhiyu/source/js/tw_cn.js","hash":"b3dfb877a3f2e66086b9e4f714f906df6f104700","modified":1740999498406},{"_id":"themes/anzhiyu/source/js/utils.js","hash":"8072d375ba873eb6d7d649f39689b4b03c33cb1d","modified":1740999498406},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/ai-info.pug","hash":"73ca24d63adbab59ef206771107a90f3afb61d56","modified":1740999498319},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/clock.pug","hash":"475ef93ee833f283e02a0a0e4e5a0ab8743e7e19","modified":1740999498319},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/console.pug","hash":"e05a5f1debeb6a48e918e04097f0a4551c93a405","modified":1740999498320},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/log-js.pug","hash":"139d6aa52a84a977892b30ee6d2fd1a95c540bd6","modified":1754043343862},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/rightmenu.pug","hash":"60a6829fed3cfebf7bdab3475a4c0291a82a678c","modified":1740999498320},{"_id":"themes/anzhiyu/layout/includes/anzhiyu/tags-group-all.pug","hash":"b3fd7a18a9b87500348eb36be62ca29e91b58dd8","modified":1740999498320},{"_id":"themes/anzhiyu/layout/includes/bili-banner/index.pug","hash":"e3954ae43a708a560894fb28a21ac369a5b2d422","modified":1740999498321},{"_id":"themes/anzhiyu/layout/includes/head/Open_Graph.pug","hash":"2f0a172bd29333a2c6301ba4b86a74173f5502d3","modified":1740999498322},{"_id":"themes/anzhiyu/layout/includes/head/analytics.pug","hash":"c1e45d4d0bd905ddcd2282de4fe89be92e67847d","modified":1740999498322},{"_id":"themes/anzhiyu/layout/includes/head/config.pug","hash":"41f77ddd5c3259d7f74f831b40dfa6ab202a990a","modified":1740999498323},{"_id":"themes/anzhiyu/layout/includes/head/config_site.pug","hash":"c50d21cd3ee0d45d8fe65ed679c4d131ef4ed7e6","modified":1740999498323},{"_id":"themes/anzhiyu/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1740999498323},{"_id":"themes/anzhiyu/layout/includes/head/noscript.pug","hash":"72efaa09ff60843567458bd54152e06f0cb2757e","modified":1740999498323},{"_id":"themes/anzhiyu/layout/includes/head/preconnect.pug","hash":"01cf3be31783c0432ee2c79a8dc4c1422832cbe0","modified":1740999498324},{"_id":"themes/anzhiyu/layout/includes/head/pwa.pug","hash":"0fc38262a891a66f98972fe0389ad9a5e1abdb7d","modified":1740999498324},{"_id":"themes/anzhiyu/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1740999498324},{"_id":"themes/anzhiyu/layout/includes/header/index.pug","hash":"b4a9f655175fca7cfe9ef3ba3866d763271fa081","modified":1740999498324},{"_id":"themes/anzhiyu/layout/includes/header/menu_item.pug","hash":"c3f390d17d92da630892f275dc935f04a7a18dbf","modified":1740999498325},{"_id":"themes/anzhiyu/layout/includes/header/nav.pug","hash":"846131493ff841e15ff7dd145033331851b5af18","modified":1740999498325},{"_id":"themes/anzhiyu/layout/includes/header/post-info.pug","hash":"0c43738c963d97cc3e28c95004d0d689fb395217","modified":1740999498325},{"_id":"themes/anzhiyu/layout/includes/header/social.pug","hash":"7e9ee70012fdef99e80aa92fb301e27900a8ec6b","modified":1740999498325},{"_id":"themes/anzhiyu/layout/includes/loading/fullpage-loading.pug","hash":"1ffb745ce3a56f5ab180cdf08907d3e3ea20d387","modified":1740999498326},{"_id":"themes/anzhiyu/layout/includes/loading/index.pug","hash":"81362a8c82029119d02b33f0f7bed249950040f0","modified":1740999498326},{"_id":"themes/anzhiyu/layout/includes/loading/pace.pug","hash":"8f25b42cb6c2c07ea609ad69c243bb11463d8b60","modified":1740999498326},{"_id":"themes/anzhiyu/layout/includes/mixins/article-sort.pug","hash":"7527afa245ae66e8913d72627e9bea7bdc38ad50","modified":1740999498326},{"_id":"themes/anzhiyu/layout/includes/mixins/post-ui.pug","hash":"4b9b6377d14e3bdf977ed130324c8d043945f057","modified":1740999498327},{"_id":"themes/anzhiyu/layout/includes/page/about.pug","hash":"ac7e135290f744b005e6c1f38a89d7e1159c61e2","modified":1740999498328},{"_id":"themes/anzhiyu/layout/includes/page/album.pug","hash":"6473c0f664bc1d7b02ecbb1321a895d506dc5094","modified":1740999498328},{"_id":"themes/anzhiyu/layout/includes/page/album_detail.pug","hash":"b056b5cc18876665316e235b60247cdc589c8f99","modified":1740999498328},{"_id":"themes/anzhiyu/layout/includes/page/categories.pug","hash":"2a9ad7e38cda70a54e7a65a513f0748fdee3ca9e","modified":1740999498328},{"_id":"themes/anzhiyu/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1740999498328},{"_id":"themes/anzhiyu/layout/includes/page/equipment.pug","hash":"7bd7f12123eb8d6b5ea65397642fec92cdbcdb1e","modified":1740999498329},{"_id":"themes/anzhiyu/layout/includes/page/essay.pug","hash":"0e317d13c40e8393962cf5fa39fee6cf82601007","modified":1740999498329},{"_id":"themes/anzhiyu/layout/includes/page/fcircle.pug","hash":"42998c6f90aa1e5ec87ba628e42b2a16889970e1","modified":1740999498329},{"_id":"themes/anzhiyu/layout/includes/page/flink.pug","hash":"7cf8f32581202e60fdc960f2f73ef9bcec5ff27f","modified":1740999498329},{"_id":"themes/anzhiyu/layout/includes/page/music.pug","hash":"2cee254ce63d5890e6cabb358b29e0c01275abc3","modified":1740999498330},{"_id":"themes/anzhiyu/layout/includes/page/room.pug","hash":"c509876ab0488cdc3a21f0dcbea01abdcae58a31","modified":1740999498330},{"_id":"themes/anzhiyu/layout/includes/page/tags.pug","hash":"affa27b6fa972c2868dc7a445342becea43476b9","modified":1740999498330},{"_id":"themes/anzhiyu/layout/includes/popup/index.pug","hash":"d7144d918882727b60af84269761e6e4ce1987ad","modified":1740999498331},{"_id":"themes/anzhiyu/layout/includes/post/post-copyright.pug","hash":"c0849c39a27d1e2952dc59df1f0200856e21068a","modified":1740999498331},{"_id":"themes/anzhiyu/layout/includes/post/ptool.pug","hash":"90ad5d7c0ab8da38d71b514c6d4e14488f5c66c8","modified":1740999498331},{"_id":"themes/anzhiyu/layout/includes/post/reward.pug","hash":"22af38003ab111e6449c029310a32021bb2a00a3","modified":1740999498331},{"_id":"themes/anzhiyu/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1740999498332},{"_id":"themes/anzhiyu/layout/includes/third-party/effect.pug","hash":"4e37535c63149708ecbedb262336014524ad8723","modified":1740999498337},{"_id":"themes/anzhiyu/layout/includes/third-party/footerBarSubtitle.pug","hash":"62cefd8319c3819e2d0606a047cb90583c28cb78","modified":1740999498337},{"_id":"themes/anzhiyu/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1740999498340},{"_id":"themes/anzhiyu/layout/includes/third-party/pjax.pug","hash":"e0f26227c21544960b9abeb9ef7e9e5a02fffc64","modified":1740999498340},{"_id":"themes/anzhiyu/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1740999498340},{"_id":"themes/anzhiyu/layout/includes/third-party/subtitle.pug","hash":"d561d36229692e2c8a9ee45a7c24c0c2b3599170","modified":1740999498342},{"_id":"themes/anzhiyu/layout/includes/top/top.pug","hash":"2b68f90a9f14f29828602289da867226b2e3c144","modified":1740999498343},{"_id":"themes/anzhiyu/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1740999498343},{"_id":"themes/anzhiyu/layout/includes/widget/card_announcement.pug","hash":"ac60c45ae916120aab1e5c5039444029042eb3a4","modified":1740999498343},{"_id":"themes/anzhiyu/layout/includes/widget/card_archives.pug","hash":"aea77a8644328f08b79f18d3b43702b0d8eb853c","modified":1740999498343},{"_id":"themes/anzhiyu/layout/includes/widget/card_author.pug","hash":"fd12d544418d11495878dedd6dc0155078cc48bb","modified":1740999498343},{"_id":"themes/anzhiyu/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1740999498344},{"_id":"themes/anzhiyu/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1740999498344},{"_id":"themes/anzhiyu/layout/includes/widget/card_console_archives.pug","hash":"cd4626a66fe724241d8a219e78308136b4919c6f","modified":1740999498344},{"_id":"themes/anzhiyu/layout/includes/widget/card_console_tags.pug","hash":"2d9385004542fe1ce615a9b4f33e45e98eb7befc","modified":1740999498344},{"_id":"themes/anzhiyu/layout/includes/widget/card_newest_comment.pug","hash":"f136d6265e7a4e77772853c248a26804d35697dd","modified":1740999498345},{"_id":"themes/anzhiyu/layout/includes/widget/card_post_toc.pug","hash":"9c849ba0451a314a1d97016be7b12f04c3ce6444","modified":1740999498345},{"_id":"themes/anzhiyu/layout/includes/widget/card_recent_post.pug","hash":"1740e6ef4e483c108dd6af5808ed7e99c644a4d0","modified":1740999498345},{"_id":"themes/anzhiyu/layout/includes/widget/card_tags.pug","hash":"b8315b369164ee12c79cd0d1ebc11753e3c26f4d","modified":1740999498345},{"_id":"themes/anzhiyu/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1740999498345},{"_id":"themes/anzhiyu/layout/includes/widget/card_webinfo.pug","hash":"7d3cae5dac3e0b2993798839df3d3cfac1fd97e9","modified":1740999498345},{"_id":"themes/anzhiyu/layout/includes/widget/card_weixin.pug","hash":"7725687c5db4329d989350f2d3e1de72b6e69156","modified":1740999498346},{"_id":"themes/anzhiyu/layout/includes/widget/index.pug","hash":"4b20439472a1cefd958afc6c882617c6fad6a0cd","modified":1740999498346},{"_id":"themes/anzhiyu/source/css/_global/function.styl","hash":"67ae8fa268d4dfe7ac691adbb1b0fdf7d2afab8f","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_global/icon.styl","hash":"0a8e0470910209033479ef515013bb968db9e4b5","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_global/index.styl","hash":"2c2a0bb1ec71246eaccc80e944ea75ed61c4d1b6","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_global/loading.styl","hash":"0dea01a2d462685b952fa41f51de784149b45e4f","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_highlight/highlight.styl","hash":"67c3f00d450ee4f992c2561cd4fd9e6b3bba2099","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_highlight/theme.styl","hash":"fd8115debce97b92c31927abb877de1bdf55fa83","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/404.styl","hash":"6c984a3a6ac4599ea11f56f218ab575242a6217e","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/aside.styl","hash":"fadd9e7e75b4b2c269310928859d5ec734aaf056","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/banner.styl","hash":"31df78e8a76590d735d27c82196b9ce0ba6e722f","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/chat.styl","hash":"f27ad7b5d781c98bcac5c12c2d70b69b830e0374","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/comments.styl","hash":"74a11d371c2e3a7f02ab314f769483960399b2b0","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/footer.styl","hash":"fe3004296f8eff61155b7095f78bfa7bc2331d08","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/head.styl","hash":"f093d83d13d778cd0e0053e1b4dde63d66d4bce2","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/home_top.styl","hash":"1df055ba6519f6920029cc4400fc39d89602440f","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/nav.styl","hash":"978915633e99e1d49bd06b94bea2eb405c8fcba0","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/oneGraphFlow.styl","hash":"3a2a8549df55fb053871576be20e7e85fe4cda37","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/post.styl","hash":"ec6a5d69475f528dfd08a7cc0877d904a4b4bcbf","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/pagination.styl","hash":"e12ff8f89458b17659e58dc65fdd2b9e7d7b4c68","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/ptool.styl","hash":"d9ca5e1a7b584c96246fb626aa74f85766c481aa","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/relatedposts.styl","hash":"96825d6fec11a7caca5d7be6ce67b985a5be8bb2","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/reward.styl","hash":"a1db997b40d35bcbb270937d76bf54021bccdda2","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/rightmenu.styl","hash":"67ed9f69ce7e88af1d96667e112f5592d1435730","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/rightside.styl","hash":"5d92b9bb99515d391323ddcaa91bfcdc5be41f44","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/shortcutKey.styl","hash":"9f45ebfba4fd0c6bde7877b06d7e1b3b1e7da405","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/sidebar.styl","hash":"1414615f345f00cc85bfc81d33268a95a2cb1090","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_layout/third-party.styl","hash":"b5f366f4c5286ca4321c832852feddda1f18c960","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_mode/darkmode.styl","hash":"c0e081e0fac44041942c1dcb2f799095c4116e20","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_mode/readmode.styl","hash":"618694850dfa8fac81e21ea369fb8f5589ac0d0f","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/about.styl","hash":"08e81e2fa5b5e761211115c733e657f56fbdc507","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/archives.styl","hash":"f70bfb4e5b5b59c5713695927c2140957dc7aa1f","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/common.styl","hash":"2ad261e7a747e2e43757f4c11324c9ed459fdbc5","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/equipment.styl","hash":"5a4cbddb41aee76cb2a9c5433b7b5a487f118da7","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/flink.styl","hash":"342b32142741c6a51f5219c93b9e3fad95430145","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/homepage.styl","hash":"8310390419d1eb5b23ae48aced4a87b0318e85be","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/music.styl","hash":"cfeba567ccb6bc421261d71a2e50242a955ba099","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/reward.styl","hash":"bbe91f4f0525a01901be2794f698ed99f5cb58bd","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/tag_page.styl","hash":"7a93cd4509a16b845ce2a9044320f43214dbcdc5","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_search/algolia.styl","hash":"e1dda3de7bbfce226bb8300db15a930176289a27","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_search/index.styl","hash":"c315988ee28ad853aaa2060055d10aa88225a131","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_search/local-search.styl","hash":"45792c13c7c439d412b7dc597d74d24f3b598406","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_tags/Introduction-card.styl","hash":"12a3b3ad1e97d0a4fa63521c4eaf2b1025a95719","modified":1740999498385},{"_id":"themes/anzhiyu/source/css/_tags/bilbili.styl","hash":"e909f60fbbdcbd072fcb1a4c2eeafa237a13b6b0","modified":1740999498385},{"_id":"themes/anzhiyu/source/css/_tags/btns.styl","hash":"0e22fdd43f698d2b27999301ca2a8bb392ac04cf","modified":1740999498385},{"_id":"themes/anzhiyu/source/css/_tags/button.styl","hash":"ea2018ba7cbc2e11d413231556d5b001cdbd5117","modified":1740999498386},{"_id":"themes/anzhiyu/source/css/_tags/checkbox.styl","hash":"3f1fcb0973ccea197afef26e0d515b3800dae348","modified":1740999498386},{"_id":"themes/anzhiyu/source/css/_tags/folding.styl","hash":"f4c117ccd9ffec997a36347358050021e60df498","modified":1740999498386},{"_id":"themes/anzhiyu/source/css/_tags/gallery.styl","hash":"99f2edcee8318b8cf5911fe344b89f58df7f313c","modified":1740999498386},{"_id":"themes/anzhiyu/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1740999498387},{"_id":"themes/anzhiyu/source/css/_tags/hide.styl","hash":"4de1984c5fdf774ef2f8e856ea188729d06743b6","modified":1740999498387},{"_id":"themes/anzhiyu/source/css/_tags/image.styl","hash":"f0043e6d5542e63a919162a545fa228acc8e1ef9","modified":1740999498387},{"_id":"themes/anzhiyu/source/css/_tags/inline-labels.styl","hash":"25a32624cab8b623634bb797cde7f2c6baff5a15","modified":1740999498387},{"_id":"themes/anzhiyu/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1740999498387},{"_id":"themes/anzhiyu/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1740999498388},{"_id":"themes/anzhiyu/source/css/_tags/note.styl","hash":"c991d29f0b970d4b738656501847cc70161dc594","modified":1740999498388},{"_id":"themes/anzhiyu/source/css/_tags/media.styl","hash":"da94e08918d1468871e69e265969d501310d3553","modified":1740999498388},{"_id":"themes/anzhiyu/source/css/_tags/site-card.styl","hash":"d497a9c654b927e1579a8a8513573bafacc7150a","modified":1740999498388},{"_id":"themes/anzhiyu/source/css/_tags/span.styl","hash":"252220ebb7f8e3bbff620b4d254a4703dfea7f3e","modified":1740999498388},{"_id":"themes/anzhiyu/source/css/_tags/tabs.styl","hash":"ead8a25eb164a361990c8a4cef3afb45d9dc33d9","modified":1740999498389},{"_id":"themes/anzhiyu/source/css/_tags/timeline.styl","hash":"f538fe0525c6491ac24b23ae2f9c1d2c396494fd","modified":1740999498389},{"_id":"themes/anzhiyu/source/css/_tags/tip.styl","hash":"4682fa963d6e667e24fe35a18b5d351c640a2769","modified":1740999498389},{"_id":"themes/anzhiyu/source/css/_third-party/normalize.min.css","hash":"a1d57065668c1695a10032cea26dc4b5cd143690","modified":1740999498389},{"_id":"themes/anzhiyu/source/css/_third-party/snackbar.styl","hash":"86a40c9b534498dadbf5076c1d6f84c030da5184","modified":1740999498390},{"_id":"themes/anzhiyu/source/css/_third-party/twikoo.styl","hash":"1040ba99c7b14ca3d71e0e517310307376892af6","modified":1740999498390},{"_id":"themes/anzhiyu/source/img/siteicon/16.png","hash":"8dc6ca32ff1264f7c1c3a8f62727a8c96ea7525b","modified":1740999498402},{"_id":"themes/anzhiyu/source/img/siteicon/32.png","hash":"147aae33224066ef2a5987c3cbbfa4309c49cef4","modified":1740999498402},{"_id":"themes/anzhiyu/source/img/siteicon/apple-icon-180.png","hash":"7f580ec4819c9ef10b1306102152f4473f037a98","modified":1740999498402},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-192.maskable.png","hash":"528b94ebcd34fb55436d64fdda76ef43ccbf031f","modified":1740999498403},{"_id":"themes/anzhiyu/source/img/siteicon/manifest-icon-512.maskable.png","hash":"6f8b4b3df8d1498db55a559f7106dc9b6e6af647","modified":1740999498403},{"_id":"themes/anzhiyu/source/js/anzhiyu/ai_abstract.js","hash":"c857f20164ed3efddc284bbf7ef56eee8cc37bcd","modified":1740999498403},{"_id":"themes/anzhiyu/source/js/anzhiyu/comment_barrage.js","hash":"1fb6922cb6d9345fc73d7f516c48a3799d7cdebd","modified":1740999498404},{"_id":"themes/anzhiyu/source/js/anzhiyu/people.js","hash":"c76d30b73f575cd9e0659600b05cf3819f20b17c","modified":1740999498404},{"_id":"themes/anzhiyu/source/js/anzhiyu/random_friends_post.js","hash":"03b34e7fc4c0b5748f036a45e822be75b282b86c","modified":1740999498404},{"_id":"themes/anzhiyu/source/js/anzhiyu/right_click_menu.js","hash":"0de57a2c37a799fec0979ea3195f4dd3827e9514","modified":1740999498404},{"_id":"themes/anzhiyu/source/js/search/algolia.js","hash":"51bcf73660635454d66dd2b7a906caf69afa9518","modified":1740999498405},{"_id":"themes/anzhiyu/source/js/search/local-search.js","hash":"23e1b201d825afc1063b51031c5c172dfdeb49d4","modified":1740999498406},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/artalk.pug","hash":"32b1ec70a6e350c7839b50110a0949d39b827db8","modified":1740999498333},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/index.pug","hash":"5a6072e73874997e27dce1bf47f3d37922430336","modified":1740999498333},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1740999498333},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1740999498333},{"_id":"themes/anzhiyu/layout/includes/third-party/card-post-count/waline.pug","hash":"6dd328b615f7ecf604fb0a1fbb1479e89674ea4b","modified":1740999498333},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1740999498334},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1740999498334},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1740999498334},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/index.pug","hash":"085b6ec501eef02bb82157712cde35bf5cdf639e","modified":1740999498334},{"_id":"themes/anzhiyu/layout/includes/third-party/chat/tidio.pug","hash":"26bbedadf03ca8e1d8a8f1d39444cbe3413f8872","modified":1740999498335},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/artalk.pug","hash":"d3fc4c539bb4e70539ba0f90debd06791be28466","modified":1740999498335},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/giscus.pug","hash":"52db09844df436f026f6f0896190bdbf6f15a473","modified":1740999498335},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/index.pug","hash":"dffbe34a6030c9c4022928b3bdb7df71c93a0aa3","modified":1740999498335},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/twikoo.pug","hash":"a60562048ff32bde1ceb8b5975158c85db2e16f2","modified":1740999498336},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/js.pug","hash":"6bdb7e04d7e6c2a1608ad5a43866ced2fca9955e","modified":1740999498336},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/valine.pug","hash":"cfcbc39104ff3bb44bdb41d9b6dab8388005b750","modified":1740999498336},{"_id":"themes/anzhiyu/layout/includes/third-party/comments/waline.pug","hash":"2fed41601733bf3b1a437aa40b9101987b9a95a2","modified":1740999498337},{"_id":"themes/anzhiyu/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1740999498338},{"_id":"themes/anzhiyu/layout/includes/third-party/math/katex.pug","hash":"65a432d2c54b9269ddaa68715dbcd8724ed32efb","modified":1740999498338},{"_id":"themes/anzhiyu/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1740999498338},{"_id":"themes/anzhiyu/layout/includes/third-party/math/mermaid.pug","hash":"0b0123024cf64a23de92f9668d71f61558cf8f60","modified":1740999498338},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/artalk.pug","hash":"c46c9af5f626063aaafe5b0c027f4f6be06d4fcf","modified":1740999498339},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/index.pug","hash":"cb4021a8bbb4045c2ecca1a161921ea45fb1506f","modified":1740999498339},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"25b1e1cc5eca5a45f738071c3c66ca7a156b3740","modified":1740999498339},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/valine.pug","hash":"836d25b645aba02c7148547aed4a1be4f6146e07","modified":1740999498339},{"_id":"themes/anzhiyu/layout/includes/third-party/newest-comments/waline.pug","hash":"5aaffe9f673e5148493e14c84ceab50652e8a0e6","modified":1740999498339},{"_id":"themes/anzhiyu/layout/includes/third-party/runtime/runtime-js.pug","hash":"f76b4d84993a26e919bbc7cd531c5da5c5edd0c0","modified":1740999498340},{"_id":"themes/anzhiyu/layout/includes/third-party/search/algolia.pug","hash":"7d48985c136472a9a3170d4c57758bb275f6ec7b","modified":1740999498341},{"_id":"themes/anzhiyu/layout/includes/third-party/search/docsearch.pug","hash":"4e0b2a779654022dff37f74aaad24e1f04280657","modified":1740999498341},{"_id":"themes/anzhiyu/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1740999498341},{"_id":"themes/anzhiyu/layout/includes/third-party/search/local-search.pug","hash":"928accb5fb5978b851b1d19abcd464258dd10e06","modified":1740999498341},{"_id":"themes/anzhiyu/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1740999498342},{"_id":"themes/anzhiyu/layout/includes/third-party/share/index.pug","hash":"a47fe41f39f0073d98baa72adbde87b2d1499049","modified":1740999498342},{"_id":"themes/anzhiyu/layout/includes/third-party/share/share-js.pug","hash":"b45fc15c3ae7db3a0fbce0d6da74a72a95ca8a2b","modified":1740999498342},{"_id":"themes/anzhiyu/source/css/_extra/album/album.css","hash":"d79cc995aca04bb0072b206668a8530ff4bdacb6","modified":1740999498358},{"_id":"themes/anzhiyu/source/css/_extra/album/album_detail.css","hash":"868db4e9e51e2bbe2d6555c957ecf56d50032c3c","modified":1740999498359},{"_id":"themes/anzhiyu/source/css/_extra/anzhiyu/custom.css","hash":"262291db00a343991c5472131804a4fd00deed4f","modified":1740999498359},{"_id":"themes/anzhiyu/source/css/_extra/aside_weixin/aside_weixin.css","hash":"a96b0559ca915f2aa1f2a80412bb75cfce6fea38","modified":1740999498359},{"_id":"themes/anzhiyu/source/css/_extra/catalog_list/catalog_list.css","hash":"027a9fb2d501c82d4bb6d69e2e76a7fa8be27f11","modified":1740999498360},{"_id":"themes/anzhiyu/source/css/_extra/categoryBar/categoryBar.css","hash":"07ef90cb816c5fef8114031bfbe7f7741b6b9b98","modified":1740999498360},{"_id":"themes/anzhiyu/source/css/_extra/clock/clock.css","hash":"581be0a5214a5534e4cf81ceb3184737e5f2d987","modified":1740999498360},{"_id":"themes/anzhiyu/source/css/_extra/code/code.css","hash":"bb9e145a87748f2db0441ab2ea79ef4a7e03356e","modified":1740999498361},{"_id":"themes/anzhiyu/source/css/_extra/code/details_summary.css","hash":"71d98974fca9d899bcb5c429b3ab3e9e1cb88bba","modified":1740999498361},{"_id":"themes/anzhiyu/source/css/_extra/commentBarrage/commentBarrage.css","hash":"335861ca0fc4aa4be700b769c871038743ea95dd","modified":1740999498361},{"_id":"themes/anzhiyu/source/css/_extra/console/console.css","hash":"0c22c5c2a004b09bb913ce52caf7ff115c8d7ef5","modified":1740999498362},{"_id":"themes/anzhiyu/source/css/_extra/essay_page/essay_page.css","hash":"99d7a0fece8d6e69da5ba570acb77016e92113fd","modified":1740999498362},{"_id":"themes/anzhiyu/source/css/_extra/essay_page/home_essay_bar.css","hash":"69c4c9acd4a42c6fad4bb507e45cf01b5f0aa37b","modified":1740999498362},{"_id":"themes/anzhiyu/source/css/_extra/fix/aplayer.css","hash":"d8beefb88560e30178b8baab596791e51b4d5451","modified":1740999498363},{"_id":"themes/anzhiyu/source/css/_extra/fix/bilibili-bangumi.css","hash":"0cb28adec6878ebd7a9372f289e21280b2bc7259","modified":1740999498363},{"_id":"themes/anzhiyu/source/css/_extra/fix/bilibili-ratio.css","hash":"628352103e72c98e6d2b25f1cdb39070bd0f021c","modified":1740999498363},{"_id":"themes/anzhiyu/source/css/_extra/fix/categories.css","hash":"b6f7f3e384f0497926ffda4a6db1ccfc90307651","modified":1740999498363},{"_id":"themes/anzhiyu/source/css/_extra/fix/clock.css","hash":"adb0616fdb157a880d1ab01bfb51e522df8c3523","modified":1740999498363},{"_id":"themes/anzhiyu/source/css/_extra/fix/comments.css","hash":"7c2a30ceeb7519c96eda1c2ef67b6873ba3f24d2","modified":1740999498364},{"_id":"themes/anzhiyu/source/css/_extra/fix/dark.css","hash":"dfc609b95f31544177babc76dade1720fe7cda42","modified":1740999498364},{"_id":"themes/anzhiyu/source/css/_extra/fix/fcircle_page.css","hash":"16833b57f9dbb1d72cdf4a3cd80751a315a0bb27","modified":1740999498364},{"_id":"themes/anzhiyu/source/css/_extra/fix/gitcalendar.css","hash":"b3081e90ff9994e0ed0206065bbb07daa90d6e29","modified":1740999498364},{"_id":"themes/anzhiyu/source/css/_extra/fix/hexo-tag-dplayer.css","hash":"7ded42d62e0ba475b9789977ed7236a6c1b32007","modified":1740999498365},{"_id":"themes/anzhiyu/source/css/_extra/fix/hide-block.css","hash":"cb6319200511548acd5642f4c6d9a3115a778b35","modified":1740999498365},{"_id":"themes/anzhiyu/source/css/_extra/fix/link_page.css","hash":"ced162602659f3cb0e423ef15c532cc7c99d6123","modified":1740999498365},{"_id":"themes/anzhiyu/source/css/_extra/fix/overflow.css","hash":"b2dafcb1bc1fa4c06f648245f11acdaf7a878d05","modified":1740999498365},{"_id":"themes/anzhiyu/source/css/_extra/fix/radius.css","hash":"a55321b326f241d0788359d5366172d7aeb734e1","modified":1740999498365},{"_id":"themes/anzhiyu/source/css/_extra/fix/site-card.css","hash":"f56eff8b96c773ae6a8e97ef0e1c822feabe5854","modified":1740999498365},{"_id":"themes/anzhiyu/source/css/_extra/footer/footer.css","hash":"497980fa313ff7045c0756a32dc08101dcc3013d","modified":1740999498366},{"_id":"themes/anzhiyu/source/css/_extra/friends/friends.css","hash":"171868650c64cb995cfab069b3c128b5d07e3d38","modified":1740999498366},{"_id":"themes/anzhiyu/source/css/_extra/greeting_box/greeting_box.css","hash":"9c54f33a8f22064e803b2a8324f93549021f5aa4","modified":1740999498366},{"_id":"themes/anzhiyu/source/css/_extra/home_top/categorygroup.css","hash":"b38d1dd55da2ff3e18e32628a5484e46e880d6b9","modified":1740999498367},{"_id":"themes/anzhiyu/source/css/_extra/home_top/home_top.css","hash":"954a9eca322a5eb3fd04ad5a71f61927b0c35400","modified":1740999498367},{"_id":"themes/anzhiyu/source/css/_extra/home_top/home_top_post_group.css","hash":"4f60d12d4f174453223be2070ed608de4ad5d14d","modified":1740999498367},{"_id":"themes/anzhiyu/source/css/_extra/home_top/swiperstyle.css","hash":"33f5a0731ac439871dd54aad7528431df091b551","modified":1740999498368},{"_id":"themes/anzhiyu/source/css/_extra/home_top/top_group_banner.css","hash":"4b3090b0f5f01dbd4b1706e4104962b15c05f8d0","modified":1740999498368},{"_id":"themes/anzhiyu/source/css/_extra/local_search/local_search.css","hash":"9fc79ed81a5f0476172fe688ecba08e7b8e3be03","modified":1740999498368},{"_id":"themes/anzhiyu/source/css/_extra/reset/reset.css","hash":"4651067de360b4e00dd361795a74a7ed2a5a62ff","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_extra/reward/about-reward.css","hash":"2201faa78b7a9ded910f59abe28df2b897fd23b0","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_extra/room/room.css","hash":"5a730fdec4fd9e1d8b38e407ba1d139abd6a17d2","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_extra/runtime/runtime.css","hash":"6e8dbcf6e505cd96192c8b75970ff65f98acf51c","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_extra/single_card/single_card.css","hash":"f7690f0dde69437f2222a9889ea957a185a7fbb6","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_extra/skills/skills.css","hash":"12901c0c77345fbd92edf591ee98266919eed259","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_extra/tag/link.css","hash":"da429802cbe2cf45b66115d03c682e9463c34dc1","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_extra/tag/site.css","hash":"8735ce339b410a72fc314af37f5d7ffd783fad05","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_highlight/highlight/index.styl","hash":"58680cd4ff5767afeabe4d4cfb621c0c2d7a68e4","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/index.styl","hash":"78398d5c407a30a561c1c98baccaabd9633edd27","modified":1740999498369},{"_id":"themes/anzhiyu/source/css/_highlight/prismjs/line-number.styl","hash":"0b8aea62d1550113e1fcc237fae1b03743190208","modified":1740999498369},{"_id":"themes/anzhiyu/source/img/404.jpg","hash":"030b9c7c9d654b3d67c1249a6e5900bf40c79373","modified":1740999498391},{"_id":"themes/anzhiyu/source/img/friend_404.gif","hash":"4c0a482bce3710942aff900d62c48333827e5a53","modified":1740999498397},{"_id":"themes/anzhiyu/source/img/loading.gif","hash":"b9e8d78b86bc48d565e26c8c1ea275c2c758fb0d","modified":1740999498402},{"_id":"public/search.xml","hash":"f141f7706d533464e525d58c7120e627863b1456","modified":1756459598382},{"_id":"public/anzhiyu/random.js","hash":"b9f0301b36977da847f89371d4ef1bfe348fefd6","modified":1756459598382},{"_id":"public/404.html","hash":"d49fb9b7ffedbe6246149a8515ea0105d49ab222","modified":1756459598382},{"_id":"public/about/index.html","hash":"284a62ab8e4d2512d8724be3656bae961538a4cb","modified":1756459598382},{"_id":"public/categories/index.html","hash":"e1b6a67462b68b30e82e65cc0873b1ccd1b65857","modified":1756459598382},{"_id":"public/tags/index.html","hash":"e1a69bbae3e911f065448a6a934de4b4cb3cc506","modified":1756459598382},{"_id":"public/article/常用快捷键/index.html","hash":"ef7c069792a623f6e942128db6b09fc4bcb8734c","modified":1756459598382},{"_id":"public/article/用户中心管理系统/index.html","hash":"d279c00cc0d0372a8260c03341e1e5d2f1cda697","modified":1756459598382},{"_id":"public/article/前端知识点心得/index.html","hash":"2192b8127fd8e417121a74b67e2129d793638a1a","modified":1756459598382},{"_id":"public/article/Cloudflare pages 搭建免费图床!/index.html","hash":"0dbf5c2514528086c16af27964d09d2aba24da30","modified":1756459598382},{"_id":"public/article/Web式云端电脑？/index.html","hash":"38b28524b4dbed94d619fd2628ec7d8b76a6a408","modified":1756459598382},{"_id":"public/article/hello-world copy/index.html","hash":"29e6b2b17388dd421b6f6a54ac10249b96e41b9b","modified":1756459598382},{"_id":"public/article/博客配置/index.html","hash":"c94dbe3d17e7dc2a2411ed4fe52c46f4dfe5d640","modified":1756459598382},{"_id":"public/article/为啥会焦虑？/index.html","hash":"1e7c5a864e07bb9cf6bb3bb49ad599c1282f4417","modified":1756459598382},{"_id":"public/archives/index.html","hash":"49c463df0501d5406cae51d2a78c05c796b22179","modified":1756459598382},{"_id":"public/archives/2025/index.html","hash":"6c540dc1fd52b841dddc1a81cdf44e6d5c5aced7","modified":1756459598382},{"_id":"public/archives/2025/03/index.html","hash":"908064367f24ccc8fc2e8f9eaed2c9be2ebdbf79","modified":1756459598382},{"_id":"public/archives/2025/07/index.html","hash":"d88f5c58b1d06efff5a2900e00d9c377078b433b","modified":1756459598382},{"_id":"public/archives/2025/08/index.html","hash":"cf1b2d17a6961e94899169aa5ac5847d5e8e3bac","modified":1756459598382},{"_id":"public/categories/技术类别/index.html","hash":"c5c12136a20ec76539c5e7a81fc92c82e223dd74","modified":1756459598382},{"_id":"public/categories/心理学类别/index.html","hash":"b850761b7b5c89a6a5c450f065356e47ea986f39","modified":1756459598382},{"_id":"public/index.html","hash":"6b8ecfde543c7af4c09c63ed3d134bf690ba06d2","modified":1756459598382},{"_id":"public/tags/技术/index.html","hash":"67c0e1e74ba987039caecd3a6b35b2137458681c","modified":1756459598382},{"_id":"public/tags/心理学/index.html","hash":"a57f41aecb0c2ece0f019ea7a679ffb0b4a8a47e","modified":1756459598382},{"_id":"public/tags/养生/index.html","hash":"b648010806b0ae123faadc6e3f329cffcd200716","modified":1756459598382},{"_id":"public/img/512.png","hash":"6988b23a31304d9de45b95a1e7c05dd42024e560","modified":1756459598382},{"_id":"public/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1756459598382},{"_id":"public/img/algolia.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1756459598382},{"_id":"public/img/comment_bg.png","hash":"91612a887446fb436e9151981e2289f2a426a3e5","modified":1756459598382},{"_id":"public/img/default_cover.jpg","hash":"455fa65e2736f61ac36360dd4f76fc1ab6a1cdd5","modified":1756459598382},{"_id":"public/img/favicon.ico","hash":"14310db268ea8d3b2096f434c6e293fc207f5f09","modified":1756459598382},{"_id":"public/img/siteicon/16.png","hash":"8dc6ca32ff1264f7c1c3a8f62727a8c96ea7525b","modified":1756459598382},{"_id":"public/img/siteicon/apple-icon-180.png","hash":"7f580ec4819c9ef10b1306102152f4473f037a98","modified":1756459598382},{"_id":"public/img/siteicon/32.png","hash":"147aae33224066ef2a5987c3cbbfa4309c49cef4","modified":1756459598382},{"_id":"public/img/siteicon/manifest-icon-192.maskable.png","hash":"528b94ebcd34fb55436d64fdda76ef43ccbf031f","modified":1756459598382},{"_id":"public/img/siteicon/manifest-icon-512.maskable.png","hash":"6f8b4b3df8d1498db55a559f7106dc9b6e6af647","modified":1756459598382},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1756459598382},{"_id":"public/js/anzhiyu/ai_abstract.js","hash":"be52eb13a416b18337d3b1142277920072e698c3","modified":1756459598382},{"_id":"public/js/anzhiyu/comment_barrage.js","hash":"1b30f922238f626c6a90ce2705789ba2362a2a9e","modified":1756459598382},{"_id":"public/js/anzhiyu/people.js","hash":"f3d2a3d0c730124d9f64dbf59486145c05a42ac6","modified":1756459598382},{"_id":"public/js/anzhiyu/random_friends_post.js","hash":"1548fdc0a8cb4291bc8793dc8d321c59c097c08e","modified":1756459598382},{"_id":"public/js/anzhiyu/right_click_menu.js","hash":"d605ee0cab24604f97ccef5747bfacaa108645ba","modified":1756459598382},{"_id":"public/js/search/algolia.js","hash":"5c2a0d0489c51c6d9e54f5a3b0c6e66a5f649450","modified":1756459598382},{"_id":"public/js/search/local-search.js","hash":"3ad66c75b4a0fc28a14a5478ee8a19fde72f837f","modified":1756459598382},{"_id":"public/css/index.css","hash":"c9ebfddc87978ddaa9a916c1bcae1481856c0470","modified":1756459598382},{"_id":"public/js/tw_cn.js","hash":"6cbec565e98cbd49aa75e6161d8fa996ae3be91a","modified":1756459598382},{"_id":"public/js/main.js","hash":"888563ad7324e565e6f5060ca126d69c7309bef1","modified":1756459598382},{"_id":"public/js/utils.js","hash":"68e7f87c38365ef1271b69943395aa5fdb5417ea","modified":1756459598382},{"_id":"public/img/404.jpg","hash":"030b9c7c9d654b3d67c1249a6e5900bf40c79373","modified":1756459598382},{"_id":"public/img/friend_404.gif","hash":"4c0a482bce3710942aff900d62c48333827e5a53","modified":1756459598382},{"_id":"public/img/loading.gif","hash":"b9e8d78b86bc48d565e26c8c1ea275c2c758fb0d","modified":1756459598382}],"Category":[{"name":"技术类别","_id":"cmewmp0e80004gs9oa3sxhyy7"},{"name":"心理学类别","_id":"cmewmp0ec000ags9o5mt21xch"}],"Data":[{"_id":"about","data":[{"class_name":"关于页","subtitle":"生活明朗，万物可爱✨","avatarImg":"https://npm.elemecdn.com/anzhiyu-blog-static@1.0.0/img/avatar.webp","avatarSkills":{"left":["🤖️ 数码科技爱好者","🔍 分享与热心帮助","🏠 智能家居小能手","🔨 设计开发一条龙"],"right":["专修交互与设计 🤝","脚踏实地行动派 🏃","团队小组发动机 🧱","壮汉人狠话不多 💢"]},"name":"杰尼SK","description":"是一名 前端工程师、运动达人、独立开发者、博主","aboutsiteTips":{"tips":"追求","title1":"源于","title2":"热爱而去 感受","word":["学习","生活","程序","体验"]},"helloAbout":"我操你妈!","skillsTips":{"tips":"技能","title":"开启创造力"},"careers":{"tips":"生涯","title":"无限进步","list":[{"desc":"EDU,计算机科学与技术专业","color":"#357ef5"},{"desc":"EDU,计算机科学与技术专业","color":"#357ef5"},{"desc":"EDU,计算机科学与技术专业","color":"#357ef5"}],"img":"https://bu.dusays.com/2023/04/21/644287166329b.png"},"statistic":{"link":"/archives","text":"文章隧道","cover":"https://bu.dusays.com/2023/05/01/644f4b037b930.jpg"},"map":{"title":"我现在住在","StrengthenTitle":"中国，西安市","background":"https://bu.dusays.com/2023/07/05/64a4c61cb20ef.jpg","backgroundDark":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg"},"selfInfo":{"selfInfoTips1":"生于","selfInfoContentYear":1996,"selfInfoTips2":"大连东软信息学院","selfInfoContent2":"计算机科学与技术专业","selfInfoTips3":"现在职业","selfInfoContent3":"终身学习者👨‍🎓"},"personalities":{"author_name":"执政官","personality_type":"ESFJ-A","photo_url":"https://bu.dusays.com/2023/07/05/64a4c63495ac5.jpg","personality_img":"https://npm.elemecdn.com/anzhiyu-blog@2.0.8/img/svg/ESFJ-A.svg","name_url":"https://www.16personalities.com/ch/esfj-%E4%BA%BA%E6%A0%BC"},"maxim":{"maxim_tips":"座右铭","maxim_top":"简简单单，","maxim_bottom":"不值一提。"},"buff":{"buff_tips":"特长","buff_top":"脑回路新奇的 酸菜鱼","buff_bottom":"二次元指数 MAX"},"game":{"game_tips":"爱好游戏","game_title":"堡垒之夜","game_uid":"UID: 125766904","game_bg":"https://bu.dusays.com/2023/04/22/64433bf26e25d.webp"},"comic":{"comic_tips":"爱好番剧","comic_title":"追番","comic_list":[{"name":"约定的梦幻岛","href":"https://www.bilibili.com/bangumi/media/md5267750/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/27/647166c44b414.webp"},{"name":"咒术回战","href":"https://www.bilibili.com/bangumi/media/md28229899/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db4398832e.webp"},{"name":"紫罗兰永恒花园","href":"https://www.bilibili.com/bangumi/media/md8892/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db43983d99.webp"},{"name":"鬼灭之刃","href":"https://www.bilibili.com/bangumi/media/md22718131/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/24/646db439856a0.webp"},{"name":"JOJO的奇妙冒险 黄金之风","href":"https://www.bilibili.com/bangumi/media/md135652/?spm_id_from=666.25.b_6d656469615f6d6f64756c65.1","cover":"https://bu.dusays.com/2023/05/30/64760e38d651a.webp"}]},"like":{"like_tips":"关注偏好","like_title":"数码科技","like_bg":"https://bu.dusays.com/2022/12/06/638f5f05ce1f7.jpg","like_bottom":"手机、电脑软硬件"},"music":{"music_tips":"音乐偏好","music_title":"Joji、K-POP、民谣","music_bg":"https://p2.music.126.net/Mrg1i7DwcwjWBvQPIMt_Mg==/79164837213438.jpg","music_link":"/music"},"reward_list":[{"name":"海阔蓝","amount":8.8,"datatime":"2023-03-28T00:00:00.000Z"},{"name":"LK66","amount":66.6,"datatime":"2023-03-24T00:00:00.000Z"},{"name":"张时貳","amount":6.6,"datatime":"2023-01-22T00:00:00.000Z"},{"name":"ZeroAf","amount":9.9,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"LuckyWangXi","amount":6.6,"datatime":"2022-12-14T00:00:00.000Z"},{"name":"刀中日月长","amount":10,"datatime":"2022-11-16T00:00:00.000Z"},{"name":"鹿啵包","amount":10,"datatime":"2022-11-08T00:00:00.000Z"},{"name":"疾速k","amount":50,"datatime":"2022-09-20T00:00:00.000Z"},{"name":"伴舟先生大霖子","amount":4.03,"datatime":"2022-10-27T00:00:00.000Z","suffix":"贝壳"},{"name":"Magica_0x0","amount":3.36,"datatime":"2022-10-07T00:00:00.000Z","suffix":"贝壳"},{"name":"名字就是要短像这样","amount":3.36,"datatime":"2022-08-25T00:00:00.000Z","suffix":"贝壳"},{"name":"Leviathan520","amount":1.34,"datatime":"2022-08-23T00:00:00.000Z","suffix":"贝壳"},{"name":"托马斯","amount":10,"datatime":"2022-08-19T00:00:00.000Z"},{"name":"哇是猫猫欸","amount":1.34,"datatime":"2022-08-19T00:00:00.000Z","suffix":"贝壳"}]}]}],"Page":[{"title":"关于","date":"2023-01-01T07:57:51.000Z","aside":false,"top_img":false,"background":"#f8f9fe","comments":0,"type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2023-01-01 15:57:51\naside: false\ntop_img: false\nbackground: \"#f8f9fe\"\ncomments: false\ntype: \"about\"\n---","updated":"2025-08-03T20:19:12.528Z","path":"about/index.html","layout":"page","_id":"cmewmp0e00000gs9oe3bw59oa","content":"","cover":"/img/default_cover.jpg","cover_type":"img","excerpt":"","more":""},{"title":"分类","date":"2024-07-04T19:36:48.000Z","aside":false,"top_img":false,"type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2024-07-05 03:36:48\naside: false\ntop_img: false\ntype: \"categories\"\n---","updated":"2025-08-01T09:41:08.721Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cmewmp0e60002gs9obp742gma","content":"","cover":"/img/default_pic.jpg","cover_type":"img","excerpt":"","more":""},{"title":"标签","date":"2024-07-04T19:36:02.000Z","type":"tags","comments":1,"top_img":false,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2024-07-05 03:36:02\ntype: \"tags\"\ncomments: true\ntop_img: false\n---","updated":"2025-04-27T18:16:48.895Z","path":"tags/index.html","layout":"page","_id":"cmewmp0e90006gs9o2jms8aor","content":"","cover":"/img/default_cover.jpg","cover_type":"img","excerpt":"","more":""}],"Post":[{"layout":"cloudflare","title":"Cloudflare pages 搭建免费图床!","date":"2025-07-26T16:24:17.000Z","cover":"/img/default_cover.jpg","updated":"2025-08-04T16:48:28.015Z","keywords":null,"description":null,"top":1,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"\n# Cloudflare pages 搭建免费图床! 享受 Telegram 的无限空间\n\n由于原有的Telegraph API接口被官方关闭，需要将上传渠道切换至Telegram Channel，请按照文档中的部署要求设置<mark>TG_Bot_Token</mark>和<mark>TG_Chat_ID</mark>，否则将无法正常使用上传功能。\n\n## 如何获取`Telegram`的<mark>Bot_Token</mark>和<mark>Chat_ID</mark>\n\n如果您还没有Telegram账户，请先创建一个。接着，按照以下步骤操作以获取<mark>BOT_TOKEN</mark>和<mark>CHAT_ID</mark>：\n\n1.获取<mark>BOT_TOKEN</mark>\n\n  - 在Telegram中，向@BotFather发送命令/newbot，根据提示依次输入您的机器人名称和用户名。成功创建机器人后，您将会收到一个BOT_TOKEN，用于与Telegram API进行交互。\n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADBmiFGIPZ2Jixr2ymRH0ROMyB1UvVAALHwjEb6w8pVHJprcjeFTihAQADAgADeAADNgQ.png)  \n\n2.设置机器人为频道管理员\n  - 创建一个新的频道（Channel），进入该频道后，选择频道设置。将刚刚创建的机器人添加为频道管理员，这样机器人才能发送消息。\n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADB2iFGS5aSynp5fbOw2F6mtWQNNn8AALIwjEb6w8pVAgpIMkU3tygAQADAgADeAADNgQ.png)  \n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCGiFGXnfPjyc_Y2o94mu_vPaQTHaAALJwjEb6w8pVI07mTPn881tAQADAgADeQADNgQ.png) \n\n  3.获取 <mark>chat_ID</mark>\n    - 通过<mark>@VersaToolsBot</mark>获取您的频道ID。向该机器人发送消息，按照指示操作，最后您将得到<mark>CHAT_ID</mark>（即频道的ID）。\n    - 或者通过@GetTheirIDBot获取您的频道ID。向该机器人发送消息，按照指示操作，最后您将得到CHAT_ID（即频道的ID）。\n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCWiQ2LDIjYergFSk97ZpLUKrE0EdAAJ1yTEbMbKIVN_1cAnqIHVKAQADAgADeAADNgQ.png)\n\n  最后去Cloudflare Pages后台设置相关的环境变量（注：修改环境变量后，需要重新部署才能生效）\n\n  | 环境变量 | 示例值 | 说明 |\n  |:-------:|:-------:|:-------:|\n  | TG_Bot_Token  | 123468:AAxxxGKrn5   | 从@BotFather获取的Telegram Bot Token。  |\n  | TG_Chat_ID  | -1234567  | 频道的ID，确保TG Bot是该频道或群组的管理员。  |\n\n## 如何部署\n### 提前准备\n\n  你唯一需要提前准备的就是一个<mark>Cloudflare</mark>账户，如果你还没有，请先注册一个。\n\n  ### 部署教程：\n  简单3步，即可部署本项目，拥有自己的图床\n\n  1.下载或Fork本仓库 (注意：目前请使用fork) [【仓库链接】](https://github.com/cf-pages/Telegraph-Image)\n  \n  2.打开Cloudflare Dashboard，进入Pages管理页面，选择创建项目，如果在第一步中选择的是fork本仓库，则选择`连接到 Git 提供程序`，如果第一步中选择的是下载本仓库则选择`直接上传` \n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCmiQ33qFa_AzNIGUVZ7WrSp7WFnBAAKGyTEbMbKIVGNcpNiiFTBMAQADAgADeQADNgQ.png)\n\n  3.按照页面提示输入项目名称，选择需要连接的git仓库（第一步选择的是fork）或是上传刚刚下载的仓库文件（第一步选择的是下载本仓库），点击`部署站点`即可完成部署\n  \n  ### 特性\n\n  1.无限图片储存数量，你可以上传不限数量的图片\n\n  2.无需购买服务器，托管于Cloudflare的网络上，当使用量不超过Cloudflare的免费额度时，完全免费\n\n  3.无需购买域名，可以使用Cloudflare Pages提供的`*.pages.dev`的免费二级域名，同时也支持绑定自定义域名\n\n  4.支持图片审查API，可根据需要开启，开启后不良图片将自动屏蔽，不再加载\n\n  5.支持后台图片管理，可以对上传的图片进行在线预览，添加白名单，黑名单等操作\n\n  ### 绑定自定义域名\n\n  在pages的自定义域里面，绑定cloudflare中存在的域名，在cloudflare托管的域名，自动会修改dns记录 \n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADC2iQ4JplNukEqbHiF0wn8sacV9JrAAKHyTEbMbKIVLwGKUtYn9UYAQADAgADeQADNgQ.png)\n\n  ### 限制\n\n  1.由于图片文件实际存储于Telegraph，Telegraph限制上传的图片大小最大为5MB\n\n  2.由于使用Cloudflare的网络，图片的加载速度在某些地区可能得不到保证\n\n  3.Cloudflare Function免费版每日限制100,000个请求（即上传或是加载图片的总次数不能超过100,000次）, 正常使用已经足够！\n\n  ---\n  \n  ✧･ﾟ: *✧･ﾟ:*  **END**    *:･ﾟ✧*:･ﾟ✧\n  \n\n\n","source":"_posts/Cloudflare pages 搭建免费图床!.md","raw":"---\nlayout: cloudflare\ntitle: Cloudflare pages 搭建免费图床!\ndate: 2025-07-27 00:24:17\ncover:\nupdated:\ntags: \n  - 技术\ncategories: 技术类别\nkeywords:\ndescription:\ntop: 1\ntop_img:\ncomments:\ntoc: \ntoc_number: \ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n\n# Cloudflare pages 搭建免费图床! 享受 Telegram 的无限空间\n\n由于原有的Telegraph API接口被官方关闭，需要将上传渠道切换至Telegram Channel，请按照文档中的部署要求设置<mark>TG_Bot_Token</mark>和<mark>TG_Chat_ID</mark>，否则将无法正常使用上传功能。\n\n## 如何获取`Telegram`的<mark>Bot_Token</mark>和<mark>Chat_ID</mark>\n\n如果您还没有Telegram账户，请先创建一个。接着，按照以下步骤操作以获取<mark>BOT_TOKEN</mark>和<mark>CHAT_ID</mark>：\n\n1.获取<mark>BOT_TOKEN</mark>\n\n  - 在Telegram中，向@BotFather发送命令/newbot，根据提示依次输入您的机器人名称和用户名。成功创建机器人后，您将会收到一个BOT_TOKEN，用于与Telegram API进行交互。\n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADBmiFGIPZ2Jixr2ymRH0ROMyB1UvVAALHwjEb6w8pVHJprcjeFTihAQADAgADeAADNgQ.png)  \n\n2.设置机器人为频道管理员\n  - 创建一个新的频道（Channel），进入该频道后，选择频道设置。将刚刚创建的机器人添加为频道管理员，这样机器人才能发送消息。\n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADB2iFGS5aSynp5fbOw2F6mtWQNNn8AALIwjEb6w8pVAgpIMkU3tygAQADAgADeAADNgQ.png)  \n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCGiFGXnfPjyc_Y2o94mu_vPaQTHaAALJwjEb6w8pVI07mTPn881tAQADAgADeQADNgQ.png) \n\n  3.获取 <mark>chat_ID</mark>\n    - 通过<mark>@VersaToolsBot</mark>获取您的频道ID。向该机器人发送消息，按照指示操作，最后您将得到<mark>CHAT_ID</mark>（即频道的ID）。\n    - 或者通过@GetTheirIDBot获取您的频道ID。向该机器人发送消息，按照指示操作，最后您将得到CHAT_ID（即频道的ID）。\n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCWiQ2LDIjYergFSk97ZpLUKrE0EdAAJ1yTEbMbKIVN_1cAnqIHVKAQADAgADeAADNgQ.png)\n\n  最后去Cloudflare Pages后台设置相关的环境变量（注：修改环境变量后，需要重新部署才能生效）\n\n  | 环境变量 | 示例值 | 说明 |\n  |:-------:|:-------:|:-------:|\n  | TG_Bot_Token  | 123468:AAxxxGKrn5   | 从@BotFather获取的Telegram Bot Token。  |\n  | TG_Chat_ID  | -1234567  | 频道的ID，确保TG Bot是该频道或群组的管理员。  |\n\n## 如何部署\n### 提前准备\n\n  你唯一需要提前准备的就是一个<mark>Cloudflare</mark>账户，如果你还没有，请先注册一个。\n\n  ### 部署教程：\n  简单3步，即可部署本项目，拥有自己的图床\n\n  1.下载或Fork本仓库 (注意：目前请使用fork) [【仓库链接】](https://github.com/cf-pages/Telegraph-Image)\n  \n  2.打开Cloudflare Dashboard，进入Pages管理页面，选择创建项目，如果在第一步中选择的是fork本仓库，则选择`连接到 Git 提供程序`，如果第一步中选择的是下载本仓库则选择`直接上传` \n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCmiQ33qFa_AzNIGUVZ7WrSp7WFnBAAKGyTEbMbKIVGNcpNiiFTBMAQADAgADeQADNgQ.png)\n\n  3.按照页面提示输入项目名称，选择需要连接的git仓库（第一步选择的是fork）或是上传刚刚下载的仓库文件（第一步选择的是下载本仓库），点击`部署站点`即可完成部署\n  \n  ### 特性\n\n  1.无限图片储存数量，你可以上传不限数量的图片\n\n  2.无需购买服务器，托管于Cloudflare的网络上，当使用量不超过Cloudflare的免费额度时，完全免费\n\n  3.无需购买域名，可以使用Cloudflare Pages提供的`*.pages.dev`的免费二级域名，同时也支持绑定自定义域名\n\n  4.支持图片审查API，可根据需要开启，开启后不良图片将自动屏蔽，不再加载\n\n  5.支持后台图片管理，可以对上传的图片进行在线预览，添加白名单，黑名单等操作\n\n  ### 绑定自定义域名\n\n  在pages的自定义域里面，绑定cloudflare中存在的域名，在cloudflare托管的域名，自动会修改dns记录 \n\n  ![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADC2iQ4JplNukEqbHiF0wn8sacV9JrAAKHyTEbMbKIVLwGKUtYn9UYAQADAgADeQADNgQ.png)\n\n  ### 限制\n\n  1.由于图片文件实际存储于Telegraph，Telegraph限制上传的图片大小最大为5MB\n\n  2.由于使用Cloudflare的网络，图片的加载速度在某些地区可能得不到保证\n\n  3.Cloudflare Function免费版每日限制100,000个请求（即上传或是加载图片的总次数不能超过100,000次）, 正常使用已经足够！\n\n  ---\n  \n  ✧･ﾟ: *✧･ﾟ:*  **END**    *:･ﾟ✧*:･ﾟ✧\n  \n\n\n","slug":"Cloudflare pages 搭建免费图床!","published":1,"photos":[],"_id":"cmewmp0e30001gs9o60ewfsol","content":"<h1 id=\"Cloudflare-pages-搭建免费图床-享受-Telegram-的无限空间\"><a href=\"#Cloudflare-pages-搭建免费图床-享受-Telegram-的无限空间\" class=\"headerlink\" title=\"Cloudflare pages 搭建免费图床! 享受 Telegram 的无限空间\"></a>Cloudflare pages 搭建免费图床! 享受 Telegram 的无限空间</h1><p>由于原有的Telegraph API接口被官方关闭，需要将上传渠道切换至Telegram Channel，请按照文档中的部署要求设置<mark>TG_Bot_Token</mark>和<mark>TG_Chat_ID</mark>，否则将无法正常使用上传功能。</p>\n<h2 id=\"如何获取Telegram的Bot-Token和Chat-ID\"><a href=\"#如何获取Telegram的Bot-Token和Chat-ID\" class=\"headerlink\" title=\"如何获取Telegram的Bot_Token和Chat_ID\"></a>如何获取<code>Telegram</code>的<mark>Bot_Token</mark>和<mark>Chat_ID</mark></h2><p>如果您还没有Telegram账户，请先创建一个。接着，按照以下步骤操作以获取<mark>BOT_TOKEN</mark>和<mark>CHAT_ID</mark>：</p>\n<p>1.获取<mark>BOT_TOKEN</mark></p>\n<ul>\n<li>在Telegram中，向@BotFather发送命令&#x2F;newbot，根据提示依次输入您的机器人名称和用户名。成功创建机器人后，您将会收到一个BOT_TOKEN，用于与Telegram API进行交互。</li>\n</ul>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADBmiFGIPZ2Jixr2ymRH0ROMyB1UvVAALHwjEb6w8pVHJprcjeFTihAQADAgADeAADNgQ.png\" alt=\"图片\">  </p>\n<p>2.设置机器人为频道管理员</p>\n<ul>\n<li>创建一个新的频道（Channel），进入该频道后，选择频道设置。将刚刚创建的机器人添加为频道管理员，这样机器人才能发送消息。</li>\n</ul>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADB2iFGS5aSynp5fbOw2F6mtWQNNn8AALIwjEb6w8pVAgpIMkU3tygAQADAgADeAADNgQ.png\" alt=\"图片\">  </p>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCGiFGXnfPjyc_Y2o94mu_vPaQTHaAALJwjEb6w8pVI07mTPn881tAQADAgADeQADNgQ.png\" alt=\"图片\"> </p>\n<p>  3.获取 <mark>chat_ID</mark><br>    - 通过<mark>@VersaToolsBot</mark>获取您的频道ID。向该机器人发送消息，按照指示操作，最后您将得到<mark>CHAT_ID</mark>（即频道的ID）。<br>    - 或者通过@GetTheirIDBot获取您的频道ID。向该机器人发送消息，按照指示操作，最后您将得到CHAT_ID（即频道的ID）。</p>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCWiQ2LDIjYergFSk97ZpLUKrE0EdAAJ1yTEbMbKIVN_1cAnqIHVKAQADAgADeAADNgQ.png\" alt=\"图片\"></p>\n<p>  最后去Cloudflare Pages后台设置相关的环境变量（注：修改环境变量后，需要重新部署才能生效）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">环境变量</th>\n<th align=\"center\">示例值</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">TG_Bot_Token</td>\n<td align=\"center\">123468:AAxxxGKrn5</td>\n<td align=\"center\">从@BotFather获取的Telegram Bot Token。</td>\n</tr>\n<tr>\n<td align=\"center\">TG_Chat_ID</td>\n<td align=\"center\">-1234567</td>\n<td align=\"center\">频道的ID，确保TG Bot是该频道或群组的管理员。</td>\n</tr>\n</tbody></table>\n<h2 id=\"如何部署\"><a href=\"#如何部署\" class=\"headerlink\" title=\"如何部署\"></a>如何部署</h2><h3 id=\"提前准备\"><a href=\"#提前准备\" class=\"headerlink\" title=\"提前准备\"></a>提前准备</h3><p>  你唯一需要提前准备的就是一个<mark>Cloudflare</mark>账户，如果你还没有，请先注册一个。</p>\n<h3 id=\"部署教程：\"><a href=\"#部署教程：\" class=\"headerlink\" title=\"部署教程：\"></a>部署教程：</h3><p>  简单3步，即可部署本项目，拥有自己的图床</p>\n<p>  1.下载或Fork本仓库 (注意：目前请使用fork) <a href=\"https://github.com/cf-pages/Telegraph-Image\">【仓库链接】</a></p>\n<p>  2.打开Cloudflare Dashboard，进入Pages管理页面，选择创建项目，如果在第一步中选择的是fork本仓库，则选择<code>连接到 Git 提供程序</code>，如果第一步中选择的是下载本仓库则选择<code>直接上传</code> </p>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCmiQ33qFa_AzNIGUVZ7WrSp7WFnBAAKGyTEbMbKIVGNcpNiiFTBMAQADAgADeQADNgQ.png\" alt=\"图片\"></p>\n<p>  3.按照页面提示输入项目名称，选择需要连接的git仓库（第一步选择的是fork）或是上传刚刚下载的仓库文件（第一步选择的是下载本仓库），点击<code>部署站点</code>即可完成部署</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>  1.无限图片储存数量，你可以上传不限数量的图片</p>\n<p>  2.无需购买服务器，托管于Cloudflare的网络上，当使用量不超过Cloudflare的免费额度时，完全免费</p>\n<p>  3.无需购买域名，可以使用Cloudflare Pages提供的<code>*.pages.dev</code>的免费二级域名，同时也支持绑定自定义域名</p>\n<p>  4.支持图片审查API，可根据需要开启，开启后不良图片将自动屏蔽，不再加载</p>\n<p>  5.支持后台图片管理，可以对上传的图片进行在线预览，添加白名单，黑名单等操作</p>\n<h3 id=\"绑定自定义域名\"><a href=\"#绑定自定义域名\" class=\"headerlink\" title=\"绑定自定义域名\"></a>绑定自定义域名</h3><p>  在pages的自定义域里面，绑定cloudflare中存在的域名，在cloudflare托管的域名，自动会修改dns记录 </p>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADC2iQ4JplNukEqbHiF0wn8sacV9JrAAKHyTEbMbKIVLwGKUtYn9UYAQADAgADeQADNgQ.png\" alt=\"图片\"></p>\n<h3 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h3><p>  1.由于图片文件实际存储于Telegraph，Telegraph限制上传的图片大小最大为5MB</p>\n<p>  2.由于使用Cloudflare的网络，图片的加载速度在某些地区可能得不到保证</p>\n<p>  3.Cloudflare Function免费版每日限制100,000个请求（即上传或是加载图片的总次数不能超过100,000次）, 正常使用已经足够！</p>\n<hr>\n<p>  ✧･ﾟ: <em>✧･ﾟ:</em>  <strong>END</strong>    <em>:･ﾟ✧</em>:･ﾟ✧</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"Cloudflare-pages-搭建免费图床-享受-Telegram-的无限空间\"><a href=\"#Cloudflare-pages-搭建免费图床-享受-Telegram-的无限空间\" class=\"headerlink\" title=\"Cloudflare pages 搭建免费图床! 享受 Telegram 的无限空间\"></a>Cloudflare pages 搭建免费图床! 享受 Telegram 的无限空间</h1><p>由于原有的Telegraph API接口被官方关闭，需要将上传渠道切换至Telegram Channel，请按照文档中的部署要求设置<mark>TG_Bot_Token</mark>和<mark>TG_Chat_ID</mark>，否则将无法正常使用上传功能。</p>\n<h2 id=\"如何获取Telegram的Bot-Token和Chat-ID\"><a href=\"#如何获取Telegram的Bot-Token和Chat-ID\" class=\"headerlink\" title=\"如何获取Telegram的Bot_Token和Chat_ID\"></a>如何获取<code>Telegram</code>的<mark>Bot_Token</mark>和<mark>Chat_ID</mark></h2><p>如果您还没有Telegram账户，请先创建一个。接着，按照以下步骤操作以获取<mark>BOT_TOKEN</mark>和<mark>CHAT_ID</mark>：</p>\n<p>1.获取<mark>BOT_TOKEN</mark></p>\n<ul>\n<li>在Telegram中，向@BotFather发送命令&#x2F;newbot，根据提示依次输入您的机器人名称和用户名。成功创建机器人后，您将会收到一个BOT_TOKEN，用于与Telegram API进行交互。</li>\n</ul>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADBmiFGIPZ2Jixr2ymRH0ROMyB1UvVAALHwjEb6w8pVHJprcjeFTihAQADAgADeAADNgQ.png\" alt=\"图片\">  </p>\n<p>2.设置机器人为频道管理员</p>\n<ul>\n<li>创建一个新的频道（Channel），进入该频道后，选择频道设置。将刚刚创建的机器人添加为频道管理员，这样机器人才能发送消息。</li>\n</ul>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADB2iFGS5aSynp5fbOw2F6mtWQNNn8AALIwjEb6w8pVAgpIMkU3tygAQADAgADeAADNgQ.png\" alt=\"图片\">  </p>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCGiFGXnfPjyc_Y2o94mu_vPaQTHaAALJwjEb6w8pVI07mTPn881tAQADAgADeQADNgQ.png\" alt=\"图片\"> </p>\n<p>  3.获取 <mark>chat_ID</mark><br>    - 通过<mark>@VersaToolsBot</mark>获取您的频道ID。向该机器人发送消息，按照指示操作，最后您将得到<mark>CHAT_ID</mark>（即频道的ID）。<br>    - 或者通过@GetTheirIDBot获取您的频道ID。向该机器人发送消息，按照指示操作，最后您将得到CHAT_ID（即频道的ID）。</p>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCWiQ2LDIjYergFSk97ZpLUKrE0EdAAJ1yTEbMbKIVN_1cAnqIHVKAQADAgADeAADNgQ.png\" alt=\"图片\"></p>\n<p>  最后去Cloudflare Pages后台设置相关的环境变量（注：修改环境变量后，需要重新部署才能生效）</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">环境变量</th>\n<th align=\"center\">示例值</th>\n<th align=\"center\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">TG_Bot_Token</td>\n<td align=\"center\">123468:AAxxxGKrn5</td>\n<td align=\"center\">从@BotFather获取的Telegram Bot Token。</td>\n</tr>\n<tr>\n<td align=\"center\">TG_Chat_ID</td>\n<td align=\"center\">-1234567</td>\n<td align=\"center\">频道的ID，确保TG Bot是该频道或群组的管理员。</td>\n</tr>\n</tbody></table>\n<h2 id=\"如何部署\"><a href=\"#如何部署\" class=\"headerlink\" title=\"如何部署\"></a>如何部署</h2><h3 id=\"提前准备\"><a href=\"#提前准备\" class=\"headerlink\" title=\"提前准备\"></a>提前准备</h3><p>  你唯一需要提前准备的就是一个<mark>Cloudflare</mark>账户，如果你还没有，请先注册一个。</p>\n<h3 id=\"部署教程：\"><a href=\"#部署教程：\" class=\"headerlink\" title=\"部署教程：\"></a>部署教程：</h3><p>  简单3步，即可部署本项目，拥有自己的图床</p>\n<p>  1.下载或Fork本仓库 (注意：目前请使用fork) <a href=\"https://github.com/cf-pages/Telegraph-Image\">【仓库链接】</a></p>\n<p>  2.打开Cloudflare Dashboard，进入Pages管理页面，选择创建项目，如果在第一步中选择的是fork本仓库，则选择<code>连接到 Git 提供程序</code>，如果第一步中选择的是下载本仓库则选择<code>直接上传</code> </p>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADCmiQ33qFa_AzNIGUVZ7WrSp7WFnBAAKGyTEbMbKIVGNcpNiiFTBMAQADAgADeQADNgQ.png\" alt=\"图片\"></p>\n<p>  3.按照页面提示输入项目名称，选择需要连接的git仓库（第一步选择的是fork）或是上传刚刚下载的仓库文件（第一步选择的是下载本仓库），点击<code>部署站点</code>即可完成部署</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><p>  1.无限图片储存数量，你可以上传不限数量的图片</p>\n<p>  2.无需购买服务器，托管于Cloudflare的网络上，当使用量不超过Cloudflare的免费额度时，完全免费</p>\n<p>  3.无需购买域名，可以使用Cloudflare Pages提供的<code>*.pages.dev</code>的免费二级域名，同时也支持绑定自定义域名</p>\n<p>  4.支持图片审查API，可根据需要开启，开启后不良图片将自动屏蔽，不再加载</p>\n<p>  5.支持后台图片管理，可以对上传的图片进行在线预览，添加白名单，黑名单等操作</p>\n<h3 id=\"绑定自定义域名\"><a href=\"#绑定自定义域名\" class=\"headerlink\" title=\"绑定自定义域名\"></a>绑定自定义域名</h3><p>  在pages的自定义域里面，绑定cloudflare中存在的域名，在cloudflare托管的域名，自动会修改dns记录 </p>\n<p>  <img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADC2iQ4JplNukEqbHiF0wn8sacV9JrAAKHyTEbMbKIVLwGKUtYn9UYAQADAgADeQADNgQ.png\" alt=\"图片\"></p>\n<h3 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h3><p>  1.由于图片文件实际存储于Telegraph，Telegraph限制上传的图片大小最大为5MB</p>\n<p>  2.由于使用Cloudflare的网络，图片的加载速度在某些地区可能得不到保证</p>\n<p>  3.Cloudflare Function免费版每日限制100,000个请求（即上传或是加载图片的总次数不能超过100,000次）, 正常使用已经足够！</p>\n<hr>\n<p>  ✧･ﾟ: <em>✧･ﾟ:</em>  <strong>END</strong>    <em>:･ﾟ✧</em>:･ﾟ✧</p>\n"},{"title":"Web式云端电脑？","cover":"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADBWiDttXlcjYtusuJH2OfjUNCpKv4AAIMxjEb6w8hVMoVnJ5vSAdoAQADAgADdwADNgQ.jpg","swiper_index":9,"top_group_index":9,"background":"#fff","date":"2025-07-25T17:08:20.000Z","updated":"2025-08-01T16:36:24.626Z","keywords":null,"description":null,"top":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"\n# 无需魔法访问 Google ！堪称Web式的云端电脑？\n无需“魔法”就能访问 Google ？关键时期开源当作备用，查资料方便， 堪称Web式的云端电脑！\n![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADBWiDttXlcjYtusuJH2OfjUNCpKv4AAIMxjEb6w8hVMoVnJ5vSAdoAQADAgADdwADNgQ.jpg)\n\nDustinbrett平台：[链接直达]\n\n[链接直达]:https://dustinbrett.com/\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","source":"_posts/Web式云端电脑？.md","raw":"---\ntitle: Web式云端电脑？\ncover: https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADBWiDttXlcjYtusuJH2OfjUNCpKv4AAIMxjEb6w8hVMoVnJ5vSAdoAQADAgADdwADNgQ.jpg\nswiper_index: 9\ntop_group_index: 9\nbackground: '#fff'\ndate: 2025-07-26 01:08:20\nupdated:\ntags:\ncategories:\nkeywords:\ndescription:\ntop:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n\n# 无需魔法访问 Google ！堪称Web式的云端电脑？\n无需“魔法”就能访问 Google ？关键时期开源当作备用，查资料方便， 堪称Web式的云端电脑！\n![图片](https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADBWiDttXlcjYtusuJH2OfjUNCpKv4AAIMxjEb6w8hVMoVnJ5vSAdoAQADAgADdwADNgQ.jpg)\n\nDustinbrett平台：[链接直达]\n\n[链接直达]:https://dustinbrett.com/\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","slug":"Web式云端电脑？","published":1,"layout":"post","photos":[],"_id":"cmewmp0e60003gs9od72d9sxt","content":"<h1 id=\"无需魔法访问-Google-！堪称Web式的云端电脑？\"><a href=\"#无需魔法访问-Google-！堪称Web式的云端电脑？\" class=\"headerlink\" title=\"无需魔法访问 Google ！堪称Web式的云端电脑？\"></a>无需魔法访问 Google ！堪称Web式的云端电脑？</h1><p>无需“魔法”就能访问 Google ？关键时期开源当作备用，查资料方便， 堪称Web式的云端电脑！<br><img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADBWiDttXlcjYtusuJH2OfjUNCpKv4AAIMxjEb6w8hVMoVnJ5vSAdoAQADAgADdwADNgQ.jpg\" alt=\"图片\"></p>\n<p>Dustinbrett平台：<a href=\"https://dustinbrett.com/\">链接直达</a></p>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"无需魔法访问-Google-！堪称Web式的云端电脑？\"><a href=\"#无需魔法访问-Google-！堪称Web式的云端电脑？\" class=\"headerlink\" title=\"无需魔法访问 Google ！堪称Web式的云端电脑？\"></a>无需魔法访问 Google ！堪称Web式的云端电脑？</h1><p>无需“魔法”就能访问 Google ？关键时期开源当作备用，查资料方便， 堪称Web式的云端电脑！<br><img src=\"https://telegraph-image-dp7.pages.dev/file/AgACAgUAAyEGAASgAAGGzAADBWiDttXlcjYtusuJH2OfjUNCpKv4AAIMxjEb6w8hVMoVnJ5vSAdoAQADAgADdwADNgQ.jpg\" alt=\"图片\"></p>\n<p>Dustinbrett平台：<a href=\"https://dustinbrett.com/\">链接直达</a></p>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n"},{"title":"Hello World","cover":"/img/default_cover.jpg","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\nfuck you you you\n","source":"_posts/hello-world copy.md","raw":"---\ntitle: Hello World\ncover:\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\nfuck you you you\n","slug":"hello-world copy","published":1,"date":"2025-07-23T18:17:28.277Z","updated":"2025-08-01T16:42:06.015Z","comments":1,"layout":"post","photos":[],"_id":"cmewmp0e90007gs9o8h8u672d","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<p>fuck you you you</p>\n","cover_type":"img","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<p>fuck you you you</p>\n"},{"title":"为啥会焦虑？","cover":"https://img.090227.xyz/file/ae62475a131f3734a201c.png","swiper_index":10,"top_group_index":10,"background":"#fff","date":"2025-03-03T11:22:15.000Z","updated":"2025-08-01T09:41:51.828Z","keywords":null,"description":null,"top":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"\n# **为啥会焦虑？**\n1. 如果你是一个没心没肺的，你是不会焦虑的，正是因为你想变得更好你才会焦虑，所以这个情绪很正常，每个人都有，正确看待就好，但是不要过量\n2. 不要尝试去控制任何一件事情\n3. 降低期待\n# ~~如何保持快乐呢？~~\n- 1.意识到我们人生没有什么事情是永久的，包括你的烦恼\n- 2.学会感恩  \n- 3.问问自己 什么是好  什么是坏？都是别人定义的  \n所以你要真正思考你自己想要的是什么，而不是别人或者社会为你定义的，你要明确自己想要的是什么？  \n# Markdown写法\n> Markdown 区块引用是在段落开头使用 > 符号 ，然后后面紧跟一个空格符号\n>> 这是区块嵌套的第二层\n>>> 这是区块嵌套的第三层    \n    \n```\n代码表示\n$(document).ready(function () {\n    alert('RUNOOB');\n});\n```\n\n这个链接用 1 作为网址变量 [Google][1]  \n这个链接用 runoob 作为网址变量 [Runoob][runoob]  \n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [runoob]: http://www.runoob.com/\n\n![alt 属性文本](图片地址)  \n![alt 属性文本](图片地址 \"可选标题\")  \n![RUNOOB 图标](https://static.jyshare.com/images/runoob-logo.png)  \n![RUNOOB 图标](https://static.jyshare.com/images/runoob-logo.png \"RUNOOB\")\n\n$$\n\\begin{Bmatrix}\n   a & b \\\\\n   c & d\n\\end{Bmatrix}\n$$\n$$\n\\begin{CD}\n   A @>a>> B \\\\\n@VbVV @AAcA \\\\\n   C @= D\n\\end{CD}\n$$\n\n\n\n\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n\n\n","source":"_posts/为啥会焦虑？.md","raw":"---\ntitle: 为啥会焦虑？\ncover: https://img.090227.xyz/file/ae62475a131f3734a201c.png\nswiper_index: 10\ntop_group_index: 10\nbackground: '#fff'\ndate: 2025-03-03 19:22:15\nupdated:\ntags: \n  - 心理学\n  - 养生\ncategories: 心理学类别\nkeywords:\ndescription:\ntop:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n\n# **为啥会焦虑？**\n1. 如果你是一个没心没肺的，你是不会焦虑的，正是因为你想变得更好你才会焦虑，所以这个情绪很正常，每个人都有，正确看待就好，但是不要过量\n2. 不要尝试去控制任何一件事情\n3. 降低期待\n# ~~如何保持快乐呢？~~\n- 1.意识到我们人生没有什么事情是永久的，包括你的烦恼\n- 2.学会感恩  \n- 3.问问自己 什么是好  什么是坏？都是别人定义的  \n所以你要真正思考你自己想要的是什么，而不是别人或者社会为你定义的，你要明确自己想要的是什么？  \n# Markdown写法\n> Markdown 区块引用是在段落开头使用 > 符号 ，然后后面紧跟一个空格符号\n>> 这是区块嵌套的第二层\n>>> 这是区块嵌套的第三层    \n    \n```\n代码表示\n$(document).ready(function () {\n    alert('RUNOOB');\n});\n```\n\n这个链接用 1 作为网址变量 [Google][1]  \n这个链接用 runoob 作为网址变量 [Runoob][runoob]  \n然后在文档的结尾为变量赋值（网址）\n\n  [1]: http://www.google.com/\n  [runoob]: http://www.runoob.com/\n\n![alt 属性文本](图片地址)  \n![alt 属性文本](图片地址 \"可选标题\")  \n![RUNOOB 图标](https://static.jyshare.com/images/runoob-logo.png)  \n![RUNOOB 图标](https://static.jyshare.com/images/runoob-logo.png \"RUNOOB\")\n\n$$\n\\begin{Bmatrix}\n   a & b \\\\\n   c & d\n\\end{Bmatrix}\n$$\n$$\n\\begin{CD}\n   A @>a>> B \\\\\n@VbVV @AAcA \\\\\n   C @= D\n\\end{CD}\n$$\n\n\n\n\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n\n\n","slug":"为啥会焦虑？","published":1,"layout":"post","photos":[],"_id":"cmewmp0ea0008gs9oaahh9g9h","content":"<h1 id=\"为啥会焦虑？\"><a href=\"#为啥会焦虑？\" class=\"headerlink\" title=\"为啥会焦虑？\"></a><strong>为啥会焦虑？</strong></h1><ol>\n<li>如果你是一个没心没肺的，你是不会焦虑的，正是因为你想变得更好你才会焦虑，所以这个情绪很正常，每个人都有，正确看待就好，但是不要过量</li>\n<li>不要尝试去控制任何一件事情</li>\n<li>降低期待</li>\n</ol>\n<h1 id=\"如何保持快乐呢？\"><a href=\"#如何保持快乐呢？\" class=\"headerlink\" title=\"如何保持快乐呢？\"></a><del>如何保持快乐呢？</del></h1><ul>\n<li>1.意识到我们人生没有什么事情是永久的，包括你的烦恼</li>\n<li>2.学会感恩  </li>\n<li>3.问问自己 什么是好  什么是坏？都是别人定义的<br>所以你要真正思考你自己想要的是什么，而不是别人或者社会为你定义的，你要明确自己想要的是什么？</li>\n</ul>\n<h1 id=\"Markdown写法\"><a href=\"#Markdown写法\" class=\"headerlink\" title=\"Markdown写法\"></a>Markdown写法</h1><blockquote>\n<p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p>\n<blockquote>\n<p>这是区块嵌套的第二层</p>\n<blockquote>\n<p>这是区块嵌套的第三层    </p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码表示</span><br><span class=\"line\">$(document).ready(function () &#123;</span><br><span class=\"line\">    alert(&#x27;RUNOOB&#x27;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">Google</a><br>这个链接用 runoob 作为网址变量 <a href=\"http://www.runoob.com/\">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p>\n<p><img src=\"/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80\" alt=\"alt 属性文本\"><br><img src=\"/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80\" alt=\"alt 属性文本\" title=\"可选标题\"><br><img src=\"https://static.jyshare.com/images/runoob-logo.png\" alt=\"RUNOOB 图标\"><br><img src=\"https://static.jyshare.com/images/runoob-logo.png\" alt=\"RUNOOB 图标\" title=\"RUNOOB\"></p>\n<p>$$<br>\\begin{Bmatrix}<br>   a &amp; b \\<br>   c &amp; d<br>\\end{Bmatrix}<br>$$<br>$$<br>\\begin{CD}<br>   A @&gt;a&gt;&gt; B \\<br>@VbVV @AAcA \\<br>   C @&#x3D; D<br>\\end{CD}<br>$$</p>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n\n\n","cover_type":"img","excerpt":"","more":"<h1 id=\"为啥会焦虑？\"><a href=\"#为啥会焦虑？\" class=\"headerlink\" title=\"为啥会焦虑？\"></a><strong>为啥会焦虑？</strong></h1><ol>\n<li>如果你是一个没心没肺的，你是不会焦虑的，正是因为你想变得更好你才会焦虑，所以这个情绪很正常，每个人都有，正确看待就好，但是不要过量</li>\n<li>不要尝试去控制任何一件事情</li>\n<li>降低期待</li>\n</ol>\n<h1 id=\"如何保持快乐呢？\"><a href=\"#如何保持快乐呢？\" class=\"headerlink\" title=\"如何保持快乐呢？\"></a><del>如何保持快乐呢？</del></h1><ul>\n<li>1.意识到我们人生没有什么事情是永久的，包括你的烦恼</li>\n<li>2.学会感恩  </li>\n<li>3.问问自己 什么是好  什么是坏？都是别人定义的<br>所以你要真正思考你自己想要的是什么，而不是别人或者社会为你定义的，你要明确自己想要的是什么？</li>\n</ul>\n<h1 id=\"Markdown写法\"><a href=\"#Markdown写法\" class=\"headerlink\" title=\"Markdown写法\"></a>Markdown写法</h1><blockquote>\n<p>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</p>\n<blockquote>\n<p>这是区块嵌套的第二层</p>\n<blockquote>\n<p>这是区块嵌套的第三层    </p>\n</blockquote>\n</blockquote>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">代码表示</span><br><span class=\"line\">$(document).ready(function () &#123;</span><br><span class=\"line\">    alert(&#x27;RUNOOB&#x27;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这个链接用 1 作为网址变量 <a href=\"http://www.google.com/\">Google</a><br>这个链接用 runoob 作为网址变量 <a href=\"http://www.runoob.com/\">Runoob</a><br>然后在文档的结尾为变量赋值（网址）</p>\n<p><img src=\"/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80\" alt=\"alt 属性文本\"><br><img src=\"/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80\" alt=\"alt 属性文本\" title=\"可选标题\"><br><img src=\"https://static.jyshare.com/images/runoob-logo.png\" alt=\"RUNOOB 图标\"><br><img src=\"https://static.jyshare.com/images/runoob-logo.png\" alt=\"RUNOOB 图标\" title=\"RUNOOB\"></p>\n<p>$$<br>\\begin{Bmatrix}<br>   a &amp; b \\<br>   c &amp; d<br>\\end{Bmatrix}<br>$$<br>$$<br>\\begin{CD}<br>   A @&gt;a&gt;&gt; B \\<br>@VbVV @AAcA \\<br>   C @&#x3D; D<br>\\end{CD}<br>$$</p>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n\n\n"},{"title":"hexo 博客配置","date":"2025-07-23T17:54:08.000Z","cover":"https://img.090227.xyz/file/ae62475a131f3734a201c.png","background":"#fff","updated":"2025-08-01T10:17:11.392Z","keywords":null,"description":null,"top":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"\nlog-js.pug 这个文件是控制台修改文件\n\n1.安装主题\n1.1. Git 安裝\n在博客根目录里安装最新版主题\n\ngit clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu\n第一次使用需要安装 pug 以及 stylus 的渲染器\n\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n\n1.2. 应用主题\n\n修改 hexo 配置文件_config.yml，把主题改为anzhiyu\n\ntheme: anzhiyu\n1.3. 覆盖配置\n覆盖配置可以使主题配置放置在 anzhiyu 目录之外，避免在更新主题时丢失自定义的配置。\n\n如果你是linux系统就执行以下命令\n\ncp -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml\n如果你是windows系统就请手动将/themes/anzhiyu/_config.yml复制到根目录下并重命名为_config.anzhiyu.yml即可。\n\n以后如果修改任何主题配置，都只需修改 _config.anzhiyu.yml 的配置即可。\n\n注意：\n\n只要存在于 _config.anzhiyu.yml 的配置都是高优先级，修改原 _config.yml 是无效的。\n每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对 _config.anzhiyu.yml 同步修改。\n想查看覆盖配置有没有生效，可以通过 hexo g --debug 查看命令行输出。\n如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的\n1.4. 配置主题与主站配置文件\n\n到这一步主题部署就完成了，就是这么简单！！！\n\n//本地预览\nhexo cl; hexo s\n\n//推送更新上线\nhexo cl; hexo g; hexo d\n1.5. 生成标签页和分类页\n执行以下命令生成标签页\n\nhexo new page tags\n找到 source/tags/index.md 这个文件，修改添加 type: \"tags\"\n\n执行以下命令生成分类页\nhexo new page categories\n找到 source/categories/index.md 这个文件，修改添加 type: \"categories\"\n\n剩下的工作就是配置_config.yml和_config.anzhiyu.yml文件，修改博客参数。\n\n2. 配置文章模版\n\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n\npage.md模版，仅供参考\n\n---\ntitle: {{ title }} #【必需】页面标题\ndate: {{ date }} #【必需】页面创建日期\ntype: #【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置\nupdated: #【可选】页面更新日期\ncomments: #【可选】显示页面评论模块(默认 true)\ndescription: #【可选】页面描述\nkeywords: #【可选】页面关键字\ntop_img: https://img.090227.xyz/file/ae62475a131f3734a201c.png #【可选】页面顶部图片\nmathjax: #【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)\nkatex: #【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)\naside: #【可选】显示侧边栏 (默认 true)\naplayer: #【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置\nhighlight_shrink: #【可选】配置代码框是否展开(true/false)(默认为设置中 highlight_shrink 的配置)\ntop_single_background: #【可选】部分页面的顶部模块背景图片\n---\n\n更多功能\n\n新建文章\n新建博文命令\nhexo new 这是一篇新的博文\n新建标签页命令\nhexo new page 新建的标签页\n文章置顶\n\n安装插件\nnpm install hexo-generator-topindex --save\n设置置顶\n给需要置顶的文章加入top参数，如下：\n\n---\ntitle: 每天一个linux命令\ndate: 2017-01-23 11:41:48\ntop: 1\ncategories:\n- 运维\ntags:\n- linux命令\n---\n如果存在多个置顶文章，top后的参数越大，越靠前。\n\n开启本地搜索\n\n安装插件\n你需要安装 hexo-generator-search，根据它的文档去做相应配置\n\nnpm install hexo-generator-search --save\n设置主题配置文件\nlocal_search:\n  enable: true\n  preload: false\n  CDN:\n参数\t解释\nenable\t是否开启本地搜索\npreload\t预加载，开启后，进入网页后会自动加载搜索文件。关闭时，只有点击搜索按钮后，才会加载搜索文件\nCDN\t搜索文件的 CDN 地址（默认使用的本地链接）\n添加任意文件\n\n例如当我们想在网站根目录添加ads.txt文件，来通过站长验证时，我们只需要在/source文件夹下放置该文件即可。","source":"_posts/博客配置.md","raw":"---\ntitle: hexo 博客配置\ndate: 2025-07-24 01:54:08\ncover: https://img.090227.xyz/file/ae62475a131f3734a201c.png\nbackground: '#fff'\nupdated:\ntags:\ncategories:\nkeywords:\ndescription:\ntop:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n\nlog-js.pug 这个文件是控制台修改文件\n\n1.安装主题\n1.1. Git 安裝\n在博客根目录里安装最新版主题\n\ngit clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu\n第一次使用需要安装 pug 以及 stylus 的渲染器\n\nnpm install hexo-renderer-pug hexo-renderer-stylus --save\n\n1.2. 应用主题\n\n修改 hexo 配置文件_config.yml，把主题改为anzhiyu\n\ntheme: anzhiyu\n1.3. 覆盖配置\n覆盖配置可以使主题配置放置在 anzhiyu 目录之外，避免在更新主题时丢失自定义的配置。\n\n如果你是linux系统就执行以下命令\n\ncp -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml\n如果你是windows系统就请手动将/themes/anzhiyu/_config.yml复制到根目录下并重命名为_config.anzhiyu.yml即可。\n\n以后如果修改任何主题配置，都只需修改 _config.anzhiyu.yml 的配置即可。\n\n注意：\n\n只要存在于 _config.anzhiyu.yml 的配置都是高优先级，修改原 _config.yml 是无效的。\n每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对 _config.anzhiyu.yml 同步修改。\n想查看覆盖配置有没有生效，可以通过 hexo g --debug 查看命令行输出。\n如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的\n1.4. 配置主题与主站配置文件\n\n到这一步主题部署就完成了，就是这么简单！！！\n\n//本地预览\nhexo cl; hexo s\n\n//推送更新上线\nhexo cl; hexo g; hexo d\n1.5. 生成标签页和分类页\n执行以下命令生成标签页\n\nhexo new page tags\n找到 source/tags/index.md 这个文件，修改添加 type: \"tags\"\n\n执行以下命令生成分类页\nhexo new page categories\n找到 source/categories/index.md 这个文件，修改添加 type: \"categories\"\n\n剩下的工作就是配置_config.yml和_config.anzhiyu.yml文件，修改博客参数。\n\n2. 配置文章模版\n\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n\npage.md模版，仅供参考\n\n---\ntitle: {{ title }} #【必需】页面标题\ndate: {{ date }} #【必需】页面创建日期\ntype: #【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置\nupdated: #【可选】页面更新日期\ncomments: #【可选】显示页面评论模块(默认 true)\ndescription: #【可选】页面描述\nkeywords: #【可选】页面关键字\ntop_img: https://img.090227.xyz/file/ae62475a131f3734a201c.png #【可选】页面顶部图片\nmathjax: #【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)\nkatex: #【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)\naside: #【可选】显示侧边栏 (默认 true)\naplayer: #【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置\nhighlight_shrink: #【可选】配置代码框是否展开(true/false)(默认为设置中 highlight_shrink 的配置)\ntop_single_background: #【可选】部分页面的顶部模块背景图片\n---\n\n更多功能\n\n新建文章\n新建博文命令\nhexo new 这是一篇新的博文\n新建标签页命令\nhexo new page 新建的标签页\n文章置顶\n\n安装插件\nnpm install hexo-generator-topindex --save\n设置置顶\n给需要置顶的文章加入top参数，如下：\n\n---\ntitle: 每天一个linux命令\ndate: 2017-01-23 11:41:48\ntop: 1\ncategories:\n- 运维\ntags:\n- linux命令\n---\n如果存在多个置顶文章，top后的参数越大，越靠前。\n\n开启本地搜索\n\n安装插件\n你需要安装 hexo-generator-search，根据它的文档去做相应配置\n\nnpm install hexo-generator-search --save\n设置主题配置文件\nlocal_search:\n  enable: true\n  preload: false\n  CDN:\n参数\t解释\nenable\t是否开启本地搜索\npreload\t预加载，开启后，进入网页后会自动加载搜索文件。关闭时，只有点击搜索按钮后，才会加载搜索文件\nCDN\t搜索文件的 CDN 地址（默认使用的本地链接）\n添加任意文件\n\n例如当我们想在网站根目录添加ads.txt文件，来通过站长验证时，我们只需要在/source文件夹下放置该文件即可。","slug":"博客配置","published":1,"layout":"post","photos":[],"_id":"cmewmp0eb0009gs9o06ds8zgx","content":"<p>log-js.pug 这个文件是控制台修改文件</p>\n<p>1.安装主题<br>1.1. Git 安裝<br>在博客根目录里安装最新版主题</p>\n<p>git clone -b main <a href=\"https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git\">https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git</a> themes&#x2F;anzhiyu<br>第一次使用需要安装 pug 以及 stylus 的渲染器</p>\n<p>npm install hexo-renderer-pug hexo-renderer-stylus –save</p>\n<p>1.2. 应用主题</p>\n<p>修改 hexo 配置文件_config.yml，把主题改为anzhiyu</p>\n<p>theme: anzhiyu<br>1.3. 覆盖配置<br>覆盖配置可以使主题配置放置在 anzhiyu 目录之外，避免在更新主题时丢失自定义的配置。</p>\n<p>如果你是linux系统就执行以下命令</p>\n<p>cp -rf .&#x2F;themes&#x2F;anzhiyu&#x2F;_config.yml .&#x2F;_config.anzhiyu.yml<br>如果你是windows系统就请手动将&#x2F;themes&#x2F;anzhiyu&#x2F;_config.yml复制到根目录下并重命名为_config.anzhiyu.yml即可。</p>\n<p>以后如果修改任何主题配置，都只需修改 _config.anzhiyu.yml 的配置即可。</p>\n<p>注意：</p>\n<p>只要存在于 _config.anzhiyu.yml 的配置都是高优先级，修改原 _config.yml 是无效的。<br>每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对 _config.anzhiyu.yml 同步修改。<br>想查看覆盖配置有没有生效，可以通过 hexo g –debug 查看命令行输出。<br>如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的<br>1.4. 配置主题与主站配置文件</p>\n<p>到这一步主题部署就完成了，就是这么简单！！！</p>\n<p>&#x2F;&#x2F;本地预览<br>hexo cl; hexo s</p>\n<p>&#x2F;&#x2F;推送更新上线<br>hexo cl; hexo g; hexo d<br>1.5. 生成标签页和分类页<br>执行以下命令生成标签页</p>\n<p>hexo new page tags<br>找到 source&#x2F;tags&#x2F;index.md 这个文件，修改添加 type: “tags”</p>\n<p>执行以下命令生成分类页<br>hexo new page categories<br>找到 source&#x2F;categories&#x2F;index.md 这个文件，修改添加 type: “categories”</p>\n<p>剩下的工作就是配置_config.yml和_config.anzhiyu.yml文件，修改博客参数。</p>\n<ol start=\"2\">\n<li>配置文章模版</li>\n</ol>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n\n<p>page.md模版，仅供参考</p>\n<hr>\n<h2 id=\"title-【必需】页面标题date-【必需】页面创建日期type-【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置updated-【可选】页面更新日期comments-【可选】显示页面评论模块-默认-true-description-【可选】页面描述keywords-【可选】页面关键字top-img-https-img-090227-xyz-file-ae62475a131f3734a201c-png-【可选】页面顶部图片mathjax-【可选】显示-mathjax-当设置-mathjax-的-per-page-false-时，才需要配置，默认-false-katex-【可选】显示-katex-当设置-katex-的-per-page-false-时，才需要配置，默认-false-aside-【可选】显示侧边栏-默认-true-aplayer-【可选】在需要的页面加载-aplayer-的-js-和-css-请参考文章下面的音乐-配置highlight-shrink-【可选】配置代码框是否展开-true-false-默认为设置中-highlight-shrink-的配置-top-single-background-【可选】部分页面的顶部模块背景图片\"><a href=\"#title-【必需】页面标题date-【必需】页面创建日期type-【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置updated-【可选】页面更新日期comments-【可选】显示页面评论模块-默认-true-description-【可选】页面描述keywords-【可选】页面关键字top-img-https-img-090227-xyz-file-ae62475a131f3734a201c-png-【可选】页面顶部图片mathjax-【可选】显示-mathjax-当设置-mathjax-的-per-page-false-时，才需要配置，默认-false-katex-【可选】显示-katex-当设置-katex-的-per-page-false-时，才需要配置，默认-false-aside-【可选】显示侧边栏-默认-true-aplayer-【可选】在需要的页面加载-aplayer-的-js-和-css-请参考文章下面的音乐-配置highlight-shrink-【可选】配置代码框是否展开-true-false-默认为设置中-highlight-shrink-的配置-top-single-background-【可选】部分页面的顶部模块背景图片\" class=\"headerlink\" title=\"title:  #【必需】页面标题date:  #【必需】页面创建日期type: #【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置updated: #【可选】页面更新日期comments: #【可选】显示页面评论模块(默认 true)description: #【可选】页面描述keywords: #【可选】页面关键字top_img: https://img.090227.xyz/file/ae62475a131f3734a201c.png #【可选】页面顶部图片mathjax: #【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)katex: #【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)aside: #【可选】显示侧边栏 (默认 true)aplayer: #【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置highlight_shrink: #【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)top_single_background: #【可选】部分页面的顶部模块背景图片\"></a>title: hexo 博客配置 #【必需】页面标题<br>date: 1753293248000 #【必需】页面创建日期<br>type: #【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置<br>updated: #【可选】页面更新日期<br>comments: #【可选】显示页面评论模块(默认 true)<br>description: #【可选】页面描述<br>keywords: #【可选】页面关键字<br>top_img: <a href=\"https://img.090227.xyz/file/ae62475a131f3734a201c.png\">https://img.090227.xyz/file/ae62475a131f3734a201c.png</a> #【可选】页面顶部图片<br>mathjax: #【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)<br>katex: #【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)<br>aside: #【可选】显示侧边栏 (默认 true)<br>aplayer: #【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置<br>highlight_shrink: #【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)<br>top_single_background: #【可选】部分页面的顶部模块背景图片</h2><p>更多功能</p>\n<p>新建文章<br>新建博文命令<br>hexo new 这是一篇新的博文<br>新建标签页命令<br>hexo new page 新建的标签页<br>文章置顶</p>\n<p>安装插件<br>npm install hexo-generator-topindex –save<br>设置置顶<br>给需要置顶的文章加入top参数，如下：</p>\n<hr>\n<h2 id=\"title-每天一个linux命令date-2017-01-23-11-41-48top-1categories-运维tags-linux命令\"><a href=\"#title-每天一个linux命令date-2017-01-23-11-41-48top-1categories-运维tags-linux命令\" class=\"headerlink\" title=\"title: 每天一个linux命令date: 2017-01-23 11:41:48top: 1categories:- 运维tags:- linux命令\"></a>title: 每天一个linux命令<br>date: 2017-01-23 11:41:48<br>top: 1<br>categories:<br>- 运维<br>tags:<br>- linux命令</h2><p>如果存在多个置顶文章，top后的参数越大，越靠前。</p>\n<p>开启本地搜索</p>\n<p>安装插件<br>你需要安装 hexo-generator-search，根据它的文档去做相应配置</p>\n<p>npm install hexo-generator-search –save<br>设置主题配置文件<br>local_search:<br>  enable: true<br>  preload: false<br>  CDN:<br>参数\t解释<br>enable\t是否开启本地搜索<br>preload\t预加载，开启后，进入网页后会自动加载搜索文件。关闭时，只有点击搜索按钮后，才会加载搜索文件<br>CDN\t搜索文件的 CDN 地址（默认使用的本地链接）<br>添加任意文件</p>\n<p>例如当我们想在网站根目录添加ads.txt文件，来通过站长验证时，我们只需要在&#x2F;source文件夹下放置该文件即可。</p>\n","cover_type":"img","excerpt":"","more":"<p>log-js.pug 这个文件是控制台修改文件</p>\n<p>1.安装主题<br>1.1. Git 安裝<br>在博客根目录里安装最新版主题</p>\n<p>git clone -b main <a href=\"https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git\">https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git</a> themes&#x2F;anzhiyu<br>第一次使用需要安装 pug 以及 stylus 的渲染器</p>\n<p>npm install hexo-renderer-pug hexo-renderer-stylus –save</p>\n<p>1.2. 应用主题</p>\n<p>修改 hexo 配置文件_config.yml，把主题改为anzhiyu</p>\n<p>theme: anzhiyu<br>1.3. 覆盖配置<br>覆盖配置可以使主题配置放置在 anzhiyu 目录之外，避免在更新主题时丢失自定义的配置。</p>\n<p>如果你是linux系统就执行以下命令</p>\n<p>cp -rf .&#x2F;themes&#x2F;anzhiyu&#x2F;_config.yml .&#x2F;_config.anzhiyu.yml<br>如果你是windows系统就请手动将&#x2F;themes&#x2F;anzhiyu&#x2F;_config.yml复制到根目录下并重命名为_config.anzhiyu.yml即可。</p>\n<p>以后如果修改任何主题配置，都只需修改 _config.anzhiyu.yml 的配置即可。</p>\n<p>注意：</p>\n<p>只要存在于 _config.anzhiyu.yml 的配置都是高优先级，修改原 _config.yml 是无效的。<br>每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对 _config.anzhiyu.yml 同步修改。<br>想查看覆盖配置有没有生效，可以通过 hexo g –debug 查看命令行输出。<br>如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的<br>1.4. 配置主题与主站配置文件</p>\n<p>到这一步主题部署就完成了，就是这么简单！！！</p>\n<p>&#x2F;&#x2F;本地预览<br>hexo cl; hexo s</p>\n<p>&#x2F;&#x2F;推送更新上线<br>hexo cl; hexo g; hexo d<br>1.5. 生成标签页和分类页<br>执行以下命令生成标签页</p>\n<p>hexo new page tags<br>找到 source&#x2F;tags&#x2F;index.md 这个文件，修改添加 type: “tags”</p>\n<p>执行以下命令生成分类页<br>hexo new page categories<br>找到 source&#x2F;categories&#x2F;index.md 这个文件，修改添加 type: “categories”</p>\n<p>剩下的工作就是配置_config.yml和_config.anzhiyu.yml文件，修改博客参数。</p>\n<ol start=\"2\">\n<li>配置文章模版</li>\n</ol>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n\n<p>page.md模版，仅供参考</p>\n<hr>\n<h2 id=\"title-【必需】页面标题date-【必需】页面创建日期type-【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置updated-【可选】页面更新日期comments-【可选】显示页面评论模块-默认-true-description-【可选】页面描述keywords-【可选】页面关键字top-img-https-img-090227-xyz-file-ae62475a131f3734a201c-png-【可选】页面顶部图片mathjax-【可选】显示-mathjax-当设置-mathjax-的-per-page-false-时，才需要配置，默认-false-katex-【可选】显示-katex-当设置-katex-的-per-page-false-时，才需要配置，默认-false-aside-【可选】显示侧边栏-默认-true-aplayer-【可选】在需要的页面加载-aplayer-的-js-和-css-请参考文章下面的音乐-配置highlight-shrink-【可选】配置代码框是否展开-true-false-默认为设置中-highlight-shrink-的配置-top-single-background-【可选】部分页面的顶部模块背景图片\"><a href=\"#title-【必需】页面标题date-【必需】页面创建日期type-【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置updated-【可选】页面更新日期comments-【可选】显示页面评论模块-默认-true-description-【可选】页面描述keywords-【可选】页面关键字top-img-https-img-090227-xyz-file-ae62475a131f3734a201c-png-【可选】页面顶部图片mathjax-【可选】显示-mathjax-当设置-mathjax-的-per-page-false-时，才需要配置，默认-false-katex-【可选】显示-katex-当设置-katex-的-per-page-false-时，才需要配置，默认-false-aside-【可选】显示侧边栏-默认-true-aplayer-【可选】在需要的页面加载-aplayer-的-js-和-css-请参考文章下面的音乐-配置highlight-shrink-【可选】配置代码框是否展开-true-false-默认为设置中-highlight-shrink-的配置-top-single-background-【可选】部分页面的顶部模块背景图片\" class=\"headerlink\" title=\"title:  #【必需】页面标题date:  #【必需】页面创建日期type: #【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置updated: #【可选】页面更新日期comments: #【可选】显示页面评论模块(默认 true)description: #【可选】页面描述keywords: #【可选】页面关键字top_img: https://img.090227.xyz/file/ae62475a131f3734a201c.png #【可选】页面顶部图片mathjax: #【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)katex: #【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)aside: #【可选】显示侧边栏 (默认 true)aplayer: #【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置highlight_shrink: #【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)top_single_background: #【可选】部分页面的顶部模块背景图片\"></a>title: hexo 博客配置 #【必需】页面标题<br>date: 1753293248000 #【必需】页面创建日期<br>type: #【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置<br>updated: #【可选】页面更新日期<br>comments: #【可选】显示页面评论模块(默认 true)<br>description: #【可选】页面描述<br>keywords: #【可选】页面关键字<br>top_img: <a href=\"https://img.090227.xyz/file/ae62475a131f3734a201c.png\">https://img.090227.xyz/file/ae62475a131f3734a201c.png</a> #【可选】页面顶部图片<br>mathjax: #【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)<br>katex: #【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)<br>aside: #【可选】显示侧边栏 (默认 true)<br>aplayer: #【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置<br>highlight_shrink: #【可选】配置代码框是否展开(true&#x2F;false)(默认为设置中 highlight_shrink 的配置)<br>top_single_background: #【可选】部分页面的顶部模块背景图片</h2><p>更多功能</p>\n<p>新建文章<br>新建博文命令<br>hexo new 这是一篇新的博文<br>新建标签页命令<br>hexo new page 新建的标签页<br>文章置顶</p>\n<p>安装插件<br>npm install hexo-generator-topindex –save<br>设置置顶<br>给需要置顶的文章加入top参数，如下：</p>\n<hr>\n<h2 id=\"title-每天一个linux命令date-2017-01-23-11-41-48top-1categories-运维tags-linux命令\"><a href=\"#title-每天一个linux命令date-2017-01-23-11-41-48top-1categories-运维tags-linux命令\" class=\"headerlink\" title=\"title: 每天一个linux命令date: 2017-01-23 11:41:48top: 1categories:- 运维tags:- linux命令\"></a>title: 每天一个linux命令<br>date: 2017-01-23 11:41:48<br>top: 1<br>categories:<br>- 运维<br>tags:<br>- linux命令</h2><p>如果存在多个置顶文章，top后的参数越大，越靠前。</p>\n<p>开启本地搜索</p>\n<p>安装插件<br>你需要安装 hexo-generator-search，根据它的文档去做相应配置</p>\n<p>npm install hexo-generator-search –save<br>设置主题配置文件<br>local_search:<br>  enable: true<br>  preload: false<br>  CDN:<br>参数\t解释<br>enable\t是否开启本地搜索<br>preload\t预加载，开启后，进入网页后会自动加载搜索文件。关闭时，只有点击搜索按钮后，才会加载搜索文件<br>CDN\t搜索文件的 CDN 地址（默认使用的本地链接）<br>添加任意文件</p>\n<p>例如当我们想在网站根目录添加ads.txt文件，来通过站长验证时，我们只需要在&#x2F;source文件夹下放置该文件即可。</p>\n"},{"title":"前端知识点心得","cover":"https://img.090227.xyz/file/ae62475a131f3734a201c.png","swiper_index":10,"top_group_index":10,"background":"#fff","date":"2025-08-04T17:11:44.000Z","updated":"2025-08-29T09:24:20.594Z","keywords":null,"description":null,"top":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"\n# 前端知识点心得\n\n## 1.JS中的this指向谁？\n  1.什么是this？\n  - 一个关键字，一个特殊的对象引用\n  - this 由调用方式决定，运行时绑定\n  - this的指向时动态的，它的值取决于**函数被调用的方式（简称谁调用它，它就指向谁）**\n\n  2.this的六条核心规则  \n    1. 默认绑定  \n      当函数独立调用（非对象方法、非事件、非构造函数等），this 默认指向 全局对象。\n      - 非严格模式下：全局对象(window)\n      - 严格模式下：undefined  \n    2. 隐式绑定(方法调用)  \n      当函数作为对象的方法被调用时，this 指向 调用该方法的对象：\n    ``` js  \n      const person = {\n        name: 'John',\n        sayHi(){\n            console.log(this.name); // this 指向 person 对象\n        }\n      }\n      person.sayHi(); // \"John\"\n    ```\n    **注意：**隐式丢失陷阱\n    如果方法被赋值给变量后调用，this 会丢失原对象指向：\n    ``` js\n    const func = person.sayHi;\n    func(); // 输出 undefined（严格模式报错）\n    ```\n    3. 显示绑定  \n    场景：通过特定的方法强制指定this  \n    方法：call()、apply()、bind()  \n    ``` js\n    function greet() {\n    console.log(`Hello, ${this.name}`);\n    }\n\n    const user = { name: 'Bob' };\n\n    // 1. call/apply 立即调用\n    greet.call(user);   // 输出 \"Hello, Bob\"\n    greet.apply(user);  // 同上\n\n    // 2. bind 返回新函数\n    const boundFunc = greet.bind(user);  // this 指向绑定user创建的新函数boundFunc\n    boundFunc();        // 输出 \"Hello, Bob\"\n    ```\n    4. new绑定  \n    场景：构造函数调用，this 指向新创建的对象  \n    ``` js\n      function Person(name){\n        // this = {}; （隐式）\n        this.name = name;\n        // return this; （隐式）\n      }\n      const jerry = new Person('Jerry');\n      console.log(jerry.name); // \"Jerry\"\n    ```\n    5. 箭头函数的 this 指向  \n    没有自己的this绑定\n    箭头函数的 this 继承自外层作用域，且无法被修改\n    this 捕获的是定义时的环境，而非调用时的环境\n    ``` js\n    const obj = {\n    name: 'Dave',\n    sayHi: () => {\n        console.log(this.name); // this 指向外层（此处是 window）\n    }\n    };\n    obj.sayHi(); // 输出 undefined（浏览器中 window.name 为空）\n    ```\n    6. DOM 事件中的 this\n    在 DOM 事件处理函数中，this 指向 触发事件的元素\n    ``` js\n    button.addEventListener('click', function() {\n    console.log(this); // 输出 <button> 元素\n    });\n    ```\n    `this绑定规则优先级： new > 显示 > 隐式 > 默认`    \n\n\n## 2.JS柯里化函数\n  1.什么是柯里化函数？（Currying）\n  柯里化是一种将多参数函数转换成一系列单参数函数的技术，它让函数变得更灵活、更易于组合。\n\n  2.柯里化的核心特点：\n  - 参数分解：每次只接受一个参数，返回新函数处理后续参数\n    多参数 -> 单参数序列\n  - 延迟执行（直到所有参数收集完毕才执行最终计算）、复用性、组合性\n\n  3.柯里化的实际用途：\n  - 参数复用,动态创建函数，函数组合\n  ``` js\n  // 创建通用的\"问候\"函数\n  const greet = (greeting) => (name) => `${greeting}, ${name}!`;\n\n  const sayHello = greet('Hello');\n  sayHello('Alice'); // \"Hello, Alice!\"\n  sayHello('Bob');   // \"Hello, Bob!\"\n  ```\n  \n  4.柯里化函数实现步骤：\n  1. 定义一个接受多个参数的函数\n  2. 定义一个返回值为一个函数的函数，接收一个参数（也可接受多个，但是接受多个那为啥还要用柯里化呢）\n  ``` js\n  // 普通加法函数\n  function add(a, b, c) {\n    return a + b + c;\n  }\n\n  // 柯里化转换函数\n  function curry(fn) {\n    return function curried(...args) {\n      if (args.length >= fn.length) {\n        return fn.apply(this, args);\n      } else {\n        return function(...args2) {\n          return curried.apply(this, args.concat(args2));\n        };\n      }\n    };\n  }\n\n  // 使用\n  const curriedAdd = curry(add);\n  console.log(curriedAdd(1)(2)(3)); // 6\n  ```\n\n## 3.什么是闭包？\n  闭包就是一个函数可以访问其外部函数及其词法作用域内的变量。 \n\n## 4.深入剖析 useEffect 依赖项数组\n  useEffect是一个函数式Hook，允许我们在函数式组件中做一些副作用操作（数据获取、设置订阅、手动更新DOM操作等），依赖项数组是第二个参数，主要作用是控制useEffect的执行时机，只有当数组中的值发生变化时，useEffect才会执行。\n\n  如果没有传递第二个参数，useEffect在首次渲染和之后的每次更新时，都会执行一次定义个回调函数。\n  \n  如果传递空数组[]，useEffect只会在组件首次渲染时执行一次回调函数，不会在组件更新时执行。如果返回了一个清理函数，那么也会在组件卸载时执行一次。\n\n  问：useEffect 的回调函数可以是 async？为什么？\n  答：不可以。async 函数隐式返回 promise,useEffect 期望回调不返回或者返回清理函数，promise 会被当做清理函数。\n\n  问：如何在useEffect中执行异步操作，比如获取数据？\n  答：在回调函数内部定义一个async函数，然后立即调用它，这样就能确保useEffect接收的回调是同步的，这个同步回调内部自己处理了异步操作。\n  ```\n  // ✅ 正确写法：在 useEffect 内部定义并立即调用异步函数\n  useEffect(() => {\n    // 1. 定义一个异步函数\n    const fetchData = async () => {\n      const result = await myApi.fetch('/api/data');\n      setData(result);\n    };\n\n    // 2. 立即调用它\n    fetchData();\n  }, []); // 依赖项数组\n  ```\n  然而，上面的基础写法忽略了一个重要问题：竞态条件（Race Condition）。\n  \n  竞态条件（Race Condition） 指的是两个或多个操作（进程、线程、任务）竞争同一份资源，但最终的执行结果取决于它们执行的精确先后顺序，而这种顺序是不确定的，从而导致无法预测的、常常是错误的的行为。\n\n  如果组件在数据请求完成之前就被卸载了，或者 useEffect 因为 props 或 state 变化而再次执行，那么第一次请求返回后调用 setData 会更新一个已卸载的组件，导致 React 报内存泄漏警告。\n\n  因此，更专业、更完整的写法需要包含清理（Cancellation）机制。\n\n  方案一：使用标志位（Abort Flag）\n  这是最经典的解决方案，利用组件卸载时 useEffect 的清理函数来阻止设置状态。\n\n  ```\n  useEffect(() => {\n    let isMounted = true; // 1. 定义一个标志位，表示组件是否挂载\n\n    const fetchData = async () => {\n      const result = await myApi.fetch('/api/data');\n      if (isMounted) { // 2. 只有在组件仍挂载时才更新状态\n        setData(result);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      isMounted = false; // 3. 清理函数：组件卸载时将标志位设为 false\n    };\n  }, []);\n  ```\n\n  方案二：使用 AbortController（现代浏览器和 Node.js 支持）\n  对于真正的网络请求（如 fetch），你可以使用 AbortController 来直接取消请求。\n  ```\n  useEffect(() => {\n    const abortController = new AbortController(); // 1. 创建控制器\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/api/data', {\n          signal: abortController.signal, // 2. 将信号注入请求\n        });\n        const result = await response.json();\n        setData(result);\n      } catch (error) {\n        if (error.name === 'AbortError') {\n          console.log('请求被取消'); // 捕获因取消产生的错误\n        } else {\n          // 处理其他真正的错误\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      abortController.abort(); // 3. 清理函数：取消进行中的请求\n    };\n  }, []);\n  ```\n\n## 5.`useTransition` 和 `useDeferredValue` 如何优化用户体验？有何区别？\n  - `useTransition`: 标记“不那么紧急”的更新\n  允许将状态更新标记为过渡（transition），降低其优先级    \n  返回`isPending`（布尔值，表示过渡是否待处理）和`startTransition`（函数，用于启动过渡，包裹低优先级状态更新）\n  - `useDeferredValue`: 获取一个“延迟”的值\n  接受一个值，并返回该值的“延迟”版本，只有当组件紧急更新（比如用户输入）完成后才会更新\n  核心：提供一个值的“副本”，此副本的更新被推迟，以避免阻塞主渲染进程\n  - `useTransition`应用场景：搜索 筛选大型列表\n  因为你在搜索框输入的时候，应该是优先级最高的，比如你在输入时，搜索框底下的列表这时候开始渲染，但是你突然删除了之前的输入框搜索值，重新输入其它值搜索，假如你之前搜索的是一个很大的列表，你肯定不想看到旧的搜索结果还在渲染，你想获取最新的列表，这是就需要将搜索列表设为低优先级。\n  ```\n  const [inputValue, setInputValue] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isPending, startTransiton] = useTransition();\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value); //立即更新\n    startTransition(() => {\n      setSearchTerm(e.target.value); //延迟更新\n    })\n  }\n  ```\n  - `useDeferredValue`应用场景：外部数据源的图表可视化\n  图标组件接受频繁更新的data的prop，导致重绘耗时，引发卡顿。这可能就无法控制父组件更新data的时机。\n  首选`useDeferredValue`:用于获取data prop的一个延迟版本\n  ```\n  function Chart({ data }) {\n    const deferredData = useDeferredValue(data); // 获取延迟版本\n    // 使用 deferredData 进行渲染\n    return <ExpensiveChartRender data={deferredData} />\n  }\n  ```\n  关键区别：`useTransition`作用于状态更新的过程。\n  `useDeferredValue`作用于一个具体的值。\n\n## 6.React中的“状态提升”：优缺点是什么？它的边界在哪里？\n  核心思想：当多个组件要共享或反应同一份变化的数据时，将共享状态移至这些组件最近的共同父组件中。\n\n  目的：1.这些组件都可以访问同一个数据源\n       2.使多个组件可以反应相同的数据变化    \n       3.保持数据流的单向性与可预测性 \n\n  缺点：1.Prop Drilling(属性逐层传递)：状态可能需要通过许多中间层组件传递;中间组件被迫接受并传递他们本身并不需要的props.\n  2.父组件膨胀：最近的共同父组件可能承载过多无关状态和逻辑，变得臃肿。\n  3.潜在的性能问题：父组件状态更新可能导致所有子组件重新渲染，导致性能问题，需配合React.memo等优化。\n\n  边界：适用场景：组件层级关系相对简单，少数几个组件共享状态，逻辑清晰，易于维护。但是碰到层级过深或全局状态等复杂场景就不适用了。\n  替代方案：Context API、状态管理库（Redux、Zustand、Jotai等）\n\n## 7.如何用 `useContext + useReducer` 实现一个轻量级的状态管理器？\n    useReducer: useState 的替代方案，适用于更复杂的状态逻辑。\n    \n\n\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","source":"_posts/前端知识点心得.md","raw":"---\ntitle: 前端知识点心得\ncover: https://img.090227.xyz/file/ae62475a131f3734a201c.png\nswiper_index: 10\ntop_group_index: 10\nbackground: '#fff'\ndate: 2025-08-05 01:11:44\nupdated:\ntags:\ncategories:\nkeywords:\ndescription:\ntop:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n\n# 前端知识点心得\n\n## 1.JS中的this指向谁？\n  1.什么是this？\n  - 一个关键字，一个特殊的对象引用\n  - this 由调用方式决定，运行时绑定\n  - this的指向时动态的，它的值取决于**函数被调用的方式（简称谁调用它，它就指向谁）**\n\n  2.this的六条核心规则  \n    1. 默认绑定  \n      当函数独立调用（非对象方法、非事件、非构造函数等），this 默认指向 全局对象。\n      - 非严格模式下：全局对象(window)\n      - 严格模式下：undefined  \n    2. 隐式绑定(方法调用)  \n      当函数作为对象的方法被调用时，this 指向 调用该方法的对象：\n    ``` js  \n      const person = {\n        name: 'John',\n        sayHi(){\n            console.log(this.name); // this 指向 person 对象\n        }\n      }\n      person.sayHi(); // \"John\"\n    ```\n    **注意：**隐式丢失陷阱\n    如果方法被赋值给变量后调用，this 会丢失原对象指向：\n    ``` js\n    const func = person.sayHi;\n    func(); // 输出 undefined（严格模式报错）\n    ```\n    3. 显示绑定  \n    场景：通过特定的方法强制指定this  \n    方法：call()、apply()、bind()  \n    ``` js\n    function greet() {\n    console.log(`Hello, ${this.name}`);\n    }\n\n    const user = { name: 'Bob' };\n\n    // 1. call/apply 立即调用\n    greet.call(user);   // 输出 \"Hello, Bob\"\n    greet.apply(user);  // 同上\n\n    // 2. bind 返回新函数\n    const boundFunc = greet.bind(user);  // this 指向绑定user创建的新函数boundFunc\n    boundFunc();        // 输出 \"Hello, Bob\"\n    ```\n    4. new绑定  \n    场景：构造函数调用，this 指向新创建的对象  \n    ``` js\n      function Person(name){\n        // this = {}; （隐式）\n        this.name = name;\n        // return this; （隐式）\n      }\n      const jerry = new Person('Jerry');\n      console.log(jerry.name); // \"Jerry\"\n    ```\n    5. 箭头函数的 this 指向  \n    没有自己的this绑定\n    箭头函数的 this 继承自外层作用域，且无法被修改\n    this 捕获的是定义时的环境，而非调用时的环境\n    ``` js\n    const obj = {\n    name: 'Dave',\n    sayHi: () => {\n        console.log(this.name); // this 指向外层（此处是 window）\n    }\n    };\n    obj.sayHi(); // 输出 undefined（浏览器中 window.name 为空）\n    ```\n    6. DOM 事件中的 this\n    在 DOM 事件处理函数中，this 指向 触发事件的元素\n    ``` js\n    button.addEventListener('click', function() {\n    console.log(this); // 输出 <button> 元素\n    });\n    ```\n    `this绑定规则优先级： new > 显示 > 隐式 > 默认`    \n\n\n## 2.JS柯里化函数\n  1.什么是柯里化函数？（Currying）\n  柯里化是一种将多参数函数转换成一系列单参数函数的技术，它让函数变得更灵活、更易于组合。\n\n  2.柯里化的核心特点：\n  - 参数分解：每次只接受一个参数，返回新函数处理后续参数\n    多参数 -> 单参数序列\n  - 延迟执行（直到所有参数收集完毕才执行最终计算）、复用性、组合性\n\n  3.柯里化的实际用途：\n  - 参数复用,动态创建函数，函数组合\n  ``` js\n  // 创建通用的\"问候\"函数\n  const greet = (greeting) => (name) => `${greeting}, ${name}!`;\n\n  const sayHello = greet('Hello');\n  sayHello('Alice'); // \"Hello, Alice!\"\n  sayHello('Bob');   // \"Hello, Bob!\"\n  ```\n  \n  4.柯里化函数实现步骤：\n  1. 定义一个接受多个参数的函数\n  2. 定义一个返回值为一个函数的函数，接收一个参数（也可接受多个，但是接受多个那为啥还要用柯里化呢）\n  ``` js\n  // 普通加法函数\n  function add(a, b, c) {\n    return a + b + c;\n  }\n\n  // 柯里化转换函数\n  function curry(fn) {\n    return function curried(...args) {\n      if (args.length >= fn.length) {\n        return fn.apply(this, args);\n      } else {\n        return function(...args2) {\n          return curried.apply(this, args.concat(args2));\n        };\n      }\n    };\n  }\n\n  // 使用\n  const curriedAdd = curry(add);\n  console.log(curriedAdd(1)(2)(3)); // 6\n  ```\n\n## 3.什么是闭包？\n  闭包就是一个函数可以访问其外部函数及其词法作用域内的变量。 \n\n## 4.深入剖析 useEffect 依赖项数组\n  useEffect是一个函数式Hook，允许我们在函数式组件中做一些副作用操作（数据获取、设置订阅、手动更新DOM操作等），依赖项数组是第二个参数，主要作用是控制useEffect的执行时机，只有当数组中的值发生变化时，useEffect才会执行。\n\n  如果没有传递第二个参数，useEffect在首次渲染和之后的每次更新时，都会执行一次定义个回调函数。\n  \n  如果传递空数组[]，useEffect只会在组件首次渲染时执行一次回调函数，不会在组件更新时执行。如果返回了一个清理函数，那么也会在组件卸载时执行一次。\n\n  问：useEffect 的回调函数可以是 async？为什么？\n  答：不可以。async 函数隐式返回 promise,useEffect 期望回调不返回或者返回清理函数，promise 会被当做清理函数。\n\n  问：如何在useEffect中执行异步操作，比如获取数据？\n  答：在回调函数内部定义一个async函数，然后立即调用它，这样就能确保useEffect接收的回调是同步的，这个同步回调内部自己处理了异步操作。\n  ```\n  // ✅ 正确写法：在 useEffect 内部定义并立即调用异步函数\n  useEffect(() => {\n    // 1. 定义一个异步函数\n    const fetchData = async () => {\n      const result = await myApi.fetch('/api/data');\n      setData(result);\n    };\n\n    // 2. 立即调用它\n    fetchData();\n  }, []); // 依赖项数组\n  ```\n  然而，上面的基础写法忽略了一个重要问题：竞态条件（Race Condition）。\n  \n  竞态条件（Race Condition） 指的是两个或多个操作（进程、线程、任务）竞争同一份资源，但最终的执行结果取决于它们执行的精确先后顺序，而这种顺序是不确定的，从而导致无法预测的、常常是错误的的行为。\n\n  如果组件在数据请求完成之前就被卸载了，或者 useEffect 因为 props 或 state 变化而再次执行，那么第一次请求返回后调用 setData 会更新一个已卸载的组件，导致 React 报内存泄漏警告。\n\n  因此，更专业、更完整的写法需要包含清理（Cancellation）机制。\n\n  方案一：使用标志位（Abort Flag）\n  这是最经典的解决方案，利用组件卸载时 useEffect 的清理函数来阻止设置状态。\n\n  ```\n  useEffect(() => {\n    let isMounted = true; // 1. 定义一个标志位，表示组件是否挂载\n\n    const fetchData = async () => {\n      const result = await myApi.fetch('/api/data');\n      if (isMounted) { // 2. 只有在组件仍挂载时才更新状态\n        setData(result);\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      isMounted = false; // 3. 清理函数：组件卸载时将标志位设为 false\n    };\n  }, []);\n  ```\n\n  方案二：使用 AbortController（现代浏览器和 Node.js 支持）\n  对于真正的网络请求（如 fetch），你可以使用 AbortController 来直接取消请求。\n  ```\n  useEffect(() => {\n    const abortController = new AbortController(); // 1. 创建控制器\n\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/api/data', {\n          signal: abortController.signal, // 2. 将信号注入请求\n        });\n        const result = await response.json();\n        setData(result);\n      } catch (error) {\n        if (error.name === 'AbortError') {\n          console.log('请求被取消'); // 捕获因取消产生的错误\n        } else {\n          // 处理其他真正的错误\n        }\n      }\n    };\n\n    fetchData();\n\n    return () => {\n      abortController.abort(); // 3. 清理函数：取消进行中的请求\n    };\n  }, []);\n  ```\n\n## 5.`useTransition` 和 `useDeferredValue` 如何优化用户体验？有何区别？\n  - `useTransition`: 标记“不那么紧急”的更新\n  允许将状态更新标记为过渡（transition），降低其优先级    \n  返回`isPending`（布尔值，表示过渡是否待处理）和`startTransition`（函数，用于启动过渡，包裹低优先级状态更新）\n  - `useDeferredValue`: 获取一个“延迟”的值\n  接受一个值，并返回该值的“延迟”版本，只有当组件紧急更新（比如用户输入）完成后才会更新\n  核心：提供一个值的“副本”，此副本的更新被推迟，以避免阻塞主渲染进程\n  - `useTransition`应用场景：搜索 筛选大型列表\n  因为你在搜索框输入的时候，应该是优先级最高的，比如你在输入时，搜索框底下的列表这时候开始渲染，但是你突然删除了之前的输入框搜索值，重新输入其它值搜索，假如你之前搜索的是一个很大的列表，你肯定不想看到旧的搜索结果还在渲染，你想获取最新的列表，这是就需要将搜索列表设为低优先级。\n  ```\n  const [inputValue, setInputValue] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isPending, startTransiton] = useTransition();\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value); //立即更新\n    startTransition(() => {\n      setSearchTerm(e.target.value); //延迟更新\n    })\n  }\n  ```\n  - `useDeferredValue`应用场景：外部数据源的图表可视化\n  图标组件接受频繁更新的data的prop，导致重绘耗时，引发卡顿。这可能就无法控制父组件更新data的时机。\n  首选`useDeferredValue`:用于获取data prop的一个延迟版本\n  ```\n  function Chart({ data }) {\n    const deferredData = useDeferredValue(data); // 获取延迟版本\n    // 使用 deferredData 进行渲染\n    return <ExpensiveChartRender data={deferredData} />\n  }\n  ```\n  关键区别：`useTransition`作用于状态更新的过程。\n  `useDeferredValue`作用于一个具体的值。\n\n## 6.React中的“状态提升”：优缺点是什么？它的边界在哪里？\n  核心思想：当多个组件要共享或反应同一份变化的数据时，将共享状态移至这些组件最近的共同父组件中。\n\n  目的：1.这些组件都可以访问同一个数据源\n       2.使多个组件可以反应相同的数据变化    \n       3.保持数据流的单向性与可预测性 \n\n  缺点：1.Prop Drilling(属性逐层传递)：状态可能需要通过许多中间层组件传递;中间组件被迫接受并传递他们本身并不需要的props.\n  2.父组件膨胀：最近的共同父组件可能承载过多无关状态和逻辑，变得臃肿。\n  3.潜在的性能问题：父组件状态更新可能导致所有子组件重新渲染，导致性能问题，需配合React.memo等优化。\n\n  边界：适用场景：组件层级关系相对简单，少数几个组件共享状态，逻辑清晰，易于维护。但是碰到层级过深或全局状态等复杂场景就不适用了。\n  替代方案：Context API、状态管理库（Redux、Zustand、Jotai等）\n\n## 7.如何用 `useContext + useReducer` 实现一个轻量级的状态管理器？\n    useReducer: useState 的替代方案，适用于更复杂的状态逻辑。\n    \n\n\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","slug":"前端知识点心得","published":1,"layout":"post","photos":[],"_id":"cmewmp0ec000dgs9ocs9m0w85","content":"<h1 id=\"前端知识点心得\"><a href=\"#前端知识点心得\" class=\"headerlink\" title=\"前端知识点心得\"></a>前端知识点心得</h1><h2 id=\"1-JS中的this指向谁？\"><a href=\"#1-JS中的this指向谁？\" class=\"headerlink\" title=\"1.JS中的this指向谁？\"></a>1.JS中的this指向谁？</h2><p>  1.什么是this？</p>\n<ul>\n<li>一个关键字，一个特殊的对象引用</li>\n<li>this 由调用方式决定，运行时绑定</li>\n<li>this的指向时动态的，它的值取决于<strong>函数被调用的方式（简称谁调用它，它就指向谁）</strong></li>\n</ul>\n<p>  2.this的六条核心规则<br>    1. 默认绑定<br>      当函数独立调用（非对象方法、非事件、非构造函数等），this 默认指向 全局对象。<br>      - 非严格模式下：全局对象(window)<br>      - 严格模式下：undefined<br>    2. 隐式绑定(方法调用)<br>      当函数作为对象的方法被调用时，this 指向 调用该方法的对象：<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// this 指向 person 对象</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.<span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// &quot;John&quot;</span></span><br></pre></td></tr></table></figure><br>    <strong>注意：</strong>隐式丢失陷阱<br>    如果方法被赋值给变量后调用，this 会丢失原对象指向：<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = person.<span class=\"property\">sayHi</span>;</span><br><span class=\"line\"><span class=\"title function_\">func</span>(); <span class=\"comment\">// 输出 undefined（严格模式报错）</span></span><br></pre></td></tr></table></figure><br>    3. 显示绑定<br>    场景：通过特定的方法强制指定this<br>    方法：call()、apply()、bind()<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. call/apply 立即调用</span></span><br><span class=\"line\">greet.<span class=\"title function_\">call</span>(user);   <span class=\"comment\">// 输出 &quot;Hello, Bob&quot;</span></span><br><span class=\"line\">greet.<span class=\"title function_\">apply</span>(user);  <span class=\"comment\">// 同上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. bind 返回新函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> boundFunc = greet.<span class=\"title function_\">bind</span>(user);  <span class=\"comment\">// this 指向绑定user创建的新函数boundFunc</span></span><br><span class=\"line\"><span class=\"title function_\">boundFunc</span>();        <span class=\"comment\">// 输出 &quot;Hello, Bob&quot;</span></span><br></pre></td></tr></table></figure><br>    4. new绑定<br>    场景：构造函数调用，this 指向新创建的对象<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this = &#123;&#125;; （隐式）</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"comment\">// return this; （隐式）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> jerry = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;Jerry&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(jerry.<span class=\"property\">name</span>); <span class=\"comment\">// &quot;Jerry&quot;</span></span><br></pre></td></tr></table></figure><br>    5. 箭头函数的 this 指向<br>    没有自己的this绑定<br>    箭头函数的 this 继承自外层作用域，且无法被修改<br>    this 捕获的是定义时的环境，而非调用时的环境<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\"><span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dave&#x27;</span>,</span><br><span class=\"line\"><span class=\"attr\">sayHi</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// this 指向外层（此处是 window）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// 输出 undefined（浏览器中 window.name 为空）</span></span><br></pre></td></tr></table></figure><br>    6. DOM 事件中的 this<br>    在 DOM 事件处理函数中，this 指向 触发事件的元素<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// 输出 &lt;button&gt; 元素</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br>    <code>this绑定规则优先级： new &gt; 显示 &gt; 隐式 &gt; 默认</code>    </p>\n<h2 id=\"2-JS柯里化函数\"><a href=\"#2-JS柯里化函数\" class=\"headerlink\" title=\"2.JS柯里化函数\"></a>2.JS柯里化函数</h2><p>  1.什么是柯里化函数？（Currying）<br>  柯里化是一种将多参数函数转换成一系列单参数函数的技术，它让函数变得更灵活、更易于组合。</p>\n<p>  2.柯里化的核心特点：</p>\n<ul>\n<li>参数分解：每次只接受一个参数，返回新函数处理后续参数<br>多参数 -&gt; 单参数序列</li>\n<li>延迟执行（直到所有参数收集完毕才执行最终计算）、复用性、组合性</li>\n</ul>\n<p>  3.柯里化的实际用途：</p>\n<ul>\n<li>参数复用,动态创建函数，函数组合  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建通用的&quot;问候&quot;函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">greet</span> = (<span class=\"params\">greeting</span>) =&gt; <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;greeting&#125;</span>, <span class=\"subst\">$&#123;name&#125;</span>!`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sayHello = <span class=\"title function_\">greet</span>(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>(<span class=\"string\">&#x27;Alice&#x27;</span>); <span class=\"comment\">// &quot;Hello, Alice!&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>(<span class=\"string\">&#x27;Bob&#x27;</span>);   <span class=\"comment\">// &quot;Hello, Bob!&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>  4.柯里化函数实现步骤：</p>\n<ol>\n<li>定义一个接受多个参数的函数</li>\n<li>定义一个返回值为一个函数的函数，接收一个参数（也可接受多个，但是接受多个那为啥还要用柯里化呢）  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通加法函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 柯里化转换函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">curried</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> &gt;= fn.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args.<span class=\"title function_\">concat</span>(args2));</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> curriedAdd = <span class=\"title function_\">curry</span>(add);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curriedAdd</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"3-什么是闭包？\"><a href=\"#3-什么是闭包？\" class=\"headerlink\" title=\"3.什么是闭包？\"></a>3.什么是闭包？</h2><p>  闭包就是一个函数可以访问其外部函数及其词法作用域内的变量。 </p>\n<h2 id=\"4-深入剖析-useEffect-依赖项数组\"><a href=\"#4-深入剖析-useEffect-依赖项数组\" class=\"headerlink\" title=\"4.深入剖析 useEffect 依赖项数组\"></a>4.深入剖析 useEffect 依赖项数组</h2><p>  useEffect是一个函数式Hook，允许我们在函数式组件中做一些副作用操作（数据获取、设置订阅、手动更新DOM操作等），依赖项数组是第二个参数，主要作用是控制useEffect的执行时机，只有当数组中的值发生变化时，useEffect才会执行。</p>\n<p>  如果没有传递第二个参数，useEffect在首次渲染和之后的每次更新时，都会执行一次定义个回调函数。</p>\n<p>  如果传递空数组[]，useEffect只会在组件首次渲染时执行一次回调函数，不会在组件更新时执行。如果返回了一个清理函数，那么也会在组件卸载时执行一次。</p>\n<p>  问：useEffect 的回调函数可以是 async？为什么？<br>  答：不可以。async 函数隐式返回 promise,useEffect 期望回调不返回或者返回清理函数，promise 会被当做清理函数。</p>\n<p>  问：如何在useEffect中执行异步操作，比如获取数据？<br>  答：在回调函数内部定义一个async函数，然后立即调用它，这样就能确保useEffect接收的回调是同步的，这个同步回调内部自己处理了异步操作。<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅ 正确写法：在 useEffect 内部定义并立即调用异步函数</span><br><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  // 1. 定义一个异步函数</span><br><span class=\"line\">  const fetchData = async () =&gt; &#123;</span><br><span class=\"line\">    const result = await myApi.fetch(&#x27;/api/data&#x27;);</span><br><span class=\"line\">    setData(result);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 2. 立即调用它</span><br><span class=\"line\">  fetchData();</span><br><span class=\"line\">&#125;, []); // 依赖项数组</span><br></pre></td></tr></table></figure><br>  然而，上面的基础写法忽略了一个重要问题：竞态条件（Race Condition）。</p>\n<p>  竞态条件（Race Condition） 指的是两个或多个操作（进程、线程、任务）竞争同一份资源，但最终的执行结果取决于它们执行的精确先后顺序，而这种顺序是不确定的，从而导致无法预测的、常常是错误的的行为。</p>\n<p>  如果组件在数据请求完成之前就被卸载了，或者 useEffect 因为 props 或 state 变化而再次执行，那么第一次请求返回后调用 setData 会更新一个已卸载的组件，导致 React 报内存泄漏警告。</p>\n<p>  因此，更专业、更完整的写法需要包含清理（Cancellation）机制。</p>\n<p>  方案一：使用标志位（Abort Flag）<br>  这是最经典的解决方案，利用组件卸载时 useEffect 的清理函数来阻止设置状态。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  let isMounted = true; // 1. 定义一个标志位，表示组件是否挂载</span><br><span class=\"line\"></span><br><span class=\"line\">  const fetchData = async () =&gt; &#123;</span><br><span class=\"line\">    const result = await myApi.fetch(&#x27;/api/data&#x27;);</span><br><span class=\"line\">    if (isMounted) &#123; // 2. 只有在组件仍挂载时才更新状态</span><br><span class=\"line\">      setData(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData();</span><br><span class=\"line\"></span><br><span class=\"line\">  return () =&gt; &#123;</span><br><span class=\"line\">    isMounted = false; // 3. 清理函数：组件卸载时将标志位设为 false</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n\n<p>  方案二：使用 AbortController（现代浏览器和 Node.js 支持）<br>  对于真正的网络请求（如 fetch），你可以使用 AbortController 来直接取消请求。<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  const abortController = new AbortController(); // 1. 创建控制器</span><br><span class=\"line\"></span><br><span class=\"line\">  const fetchData = async () =&gt; &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      const response = await fetch(&#x27;/api/data&#x27;, &#123;</span><br><span class=\"line\">        signal: abortController.signal, // 2. 将信号注入请求</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      const result = await response.json();</span><br><span class=\"line\">      setData(result);</span><br><span class=\"line\">    &#125; catch (error) &#123;</span><br><span class=\"line\">      if (error.name === &#x27;AbortError&#x27;) &#123;</span><br><span class=\"line\">        console.log(&#x27;请求被取消&#x27;); // 捕获因取消产生的错误</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        // 处理其他真正的错误</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData();</span><br><span class=\"line\"></span><br><span class=\"line\">  return () =&gt; &#123;</span><br><span class=\"line\">    abortController.abort(); // 3. 清理函数：取消进行中的请求</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-useTransition-和-useDeferredValue-如何优化用户体验？有何区别？\"><a href=\"#5-useTransition-和-useDeferredValue-如何优化用户体验？有何区别？\" class=\"headerlink\" title=\"5.useTransition 和 useDeferredValue 如何优化用户体验？有何区别？\"></a>5.<code>useTransition</code> 和 <code>useDeferredValue</code> 如何优化用户体验？有何区别？</h2><ul>\n<li><code>useTransition</code>: 标记“不那么紧急”的更新<br>  允许将状态更新标记为过渡（transition），降低其优先级<br>  返回<code>isPending</code>（布尔值，表示过渡是否待处理）和<code>startTransition</code>（函数，用于启动过渡，包裹低优先级状态更新）</li>\n<li><code>useDeferredValue</code>: 获取一个“延迟”的值<br>  接受一个值，并返回该值的“延迟”版本，只有当组件紧急更新（比如用户输入）完成后才会更新<br>  核心：提供一个值的“副本”，此副本的更新被推迟，以避免阻塞主渲染进程</li>\n<li><code>useTransition</code>应用场景：搜索 筛选大型列表<br>  因为你在搜索框输入的时候，应该是优先级最高的，比如你在输入时，搜索框底下的列表这时候开始渲染，但是你突然删除了之前的输入框搜索值，重新输入其它值搜索，假如你之前搜索的是一个很大的列表，你肯定不想看到旧的搜索结果还在渲染，你想获取最新的列表，这是就需要将搜索列表设为低优先级。  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [inputValue, setInputValue] = useState(&#x27;&#x27;);</span><br><span class=\"line\">const [searchTerm, setSearchTerm] = useState(&#x27;&#x27;);</span><br><span class=\"line\">const [isPending, startTransiton] = useTransition();</span><br><span class=\"line\"></span><br><span class=\"line\">const handleChange = (e) =&gt; &#123;</span><br><span class=\"line\">  setInputValue(e.target.value); //立即更新</span><br><span class=\"line\">  startTransition(() =&gt; &#123;</span><br><span class=\"line\">    setSearchTerm(e.target.value); //延迟更新</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>useDeferredValue</code>应用场景：外部数据源的图表可视化<br>  图标组件接受频繁更新的data的prop，导致重绘耗时，引发卡顿。这可能就无法控制父组件更新data的时机。<br>  首选<code>useDeferredValue</code>:用于获取data prop的一个延迟版本  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Chart(&#123; data &#125;) &#123;</span><br><span class=\"line\">  const deferredData = useDeferredValue(data); // 获取延迟版本</span><br><span class=\"line\">  // 使用 deferredData 进行渲染</span><br><span class=\"line\">  return &lt;ExpensiveChartRender data=&#123;deferredData&#125; /&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  关键区别：<code>useTransition</code>作用于状态更新的过程。<br>  <code>useDeferredValue</code>作用于一个具体的值。</li>\n</ul>\n<h2 id=\"6-React中的“状态提升”：优缺点是什么？它的边界在哪里？\"><a href=\"#6-React中的“状态提升”：优缺点是什么？它的边界在哪里？\" class=\"headerlink\" title=\"6.React中的“状态提升”：优缺点是什么？它的边界在哪里？\"></a>6.React中的“状态提升”：优缺点是什么？它的边界在哪里？</h2><p>  核心思想：当多个组件要共享或反应同一份变化的数据时，将共享状态移至这些组件最近的共同父组件中。</p>\n<p>  目的：1.这些组件都可以访问同一个数据源<br>       2.使多个组件可以反应相同的数据变化<br>       3.保持数据流的单向性与可预测性 </p>\n<p>  缺点：1.Prop Drilling(属性逐层传递)：状态可能需要通过许多中间层组件传递;中间组件被迫接受并传递他们本身并不需要的props.<br>  2.父组件膨胀：最近的共同父组件可能承载过多无关状态和逻辑，变得臃肿。<br>  3.潜在的性能问题：父组件状态更新可能导致所有子组件重新渲染，导致性能问题，需配合React.memo等优化。</p>\n<p>  边界：适用场景：组件层级关系相对简单，少数几个组件共享状态，逻辑清晰，易于维护。但是碰到层级过深或全局状态等复杂场景就不适用了。<br>  替代方案：Context API、状态管理库（Redux、Zustand、Jotai等）</p>\n<h2 id=\"7-如何用-useContext-useReducer-实现一个轻量级的状态管理器？\"><a href=\"#7-如何用-useContext-useReducer-实现一个轻量级的状态管理器？\" class=\"headerlink\" title=\"7.如何用 useContext + useReducer 实现一个轻量级的状态管理器？\"></a>7.如何用 <code>useContext + useReducer</code> 实现一个轻量级的状态管理器？</h2><pre><code>useReducer: useState 的替代方案，适用于更复杂的状态逻辑。\n</code></pre>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"前端知识点心得\"><a href=\"#前端知识点心得\" class=\"headerlink\" title=\"前端知识点心得\"></a>前端知识点心得</h1><h2 id=\"1-JS中的this指向谁？\"><a href=\"#1-JS中的this指向谁？\" class=\"headerlink\" title=\"1.JS中的this指向谁？\"></a>1.JS中的this指向谁？</h2><p>  1.什么是this？</p>\n<ul>\n<li>一个关键字，一个特殊的对象引用</li>\n<li>this 由调用方式决定，运行时绑定</li>\n<li>this的指向时动态的，它的值取决于<strong>函数被调用的方式（简称谁调用它，它就指向谁）</strong></li>\n</ul>\n<p>  2.this的六条核心规则<br>    1. 默认绑定<br>      当函数独立调用（非对象方法、非事件、非构造函数等），this 默认指向 全局对象。<br>      - 非严格模式下：全局对象(window)<br>      - 严格模式下：undefined<br>    2. 隐式绑定(方法调用)<br>      当函数作为对象的方法被调用时，this 指向 调用该方法的对象：<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&#x27;John&#x27;</span>,</span><br><span class=\"line\">  <span class=\"title function_\">sayHi</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// this 指向 person 对象</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person.<span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// &quot;John&quot;</span></span><br></pre></td></tr></table></figure><br>    <strong>注意：</strong>隐式丢失陷阱<br>    如果方法被赋值给变量后调用，this 会丢失原对象指向：<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> func = person.<span class=\"property\">sayHi</span>;</span><br><span class=\"line\"><span class=\"title function_\">func</span>(); <span class=\"comment\">// 输出 undefined（严格模式报错）</span></span><br></pre></td></tr></table></figure><br>    3. 显示绑定<br>    场景：通过特定的方法强制指定this<br>    方法：call()、apply()、bind()<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">greet</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`Hello, <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&#x27;Bob&#x27;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1. call/apply 立即调用</span></span><br><span class=\"line\">greet.<span class=\"title function_\">call</span>(user);   <span class=\"comment\">// 输出 &quot;Hello, Bob&quot;</span></span><br><span class=\"line\">greet.<span class=\"title function_\">apply</span>(user);  <span class=\"comment\">// 同上</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2. bind 返回新函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> boundFunc = greet.<span class=\"title function_\">bind</span>(user);  <span class=\"comment\">// this 指向绑定user创建的新函数boundFunc</span></span><br><span class=\"line\"><span class=\"title function_\">boundFunc</span>();        <span class=\"comment\">// 输出 &quot;Hello, Bob&quot;</span></span><br></pre></td></tr></table></figure><br>    4. new绑定<br>    场景：构造函数调用，this 指向新创建的对象<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// this = &#123;&#125;; （隐式）</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  <span class=\"comment\">// return this; （隐式）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> jerry = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;Jerry&#x27;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(jerry.<span class=\"property\">name</span>); <span class=\"comment\">// &quot;Jerry&quot;</span></span><br></pre></td></tr></table></figure><br>    5. 箭头函数的 this 指向<br>    没有自己的this绑定<br>    箭头函数的 this 继承自外层作用域，且无法被修改<br>    this 捕获的是定义时的环境，而非调用时的环境<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\"><span class=\"attr\">name</span>: <span class=\"string\">&#x27;Dave&#x27;</span>,</span><br><span class=\"line\"><span class=\"attr\">sayHi</span>: <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">name</span>); <span class=\"comment\">// this 指向外层（此处是 window）</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.<span class=\"title function_\">sayHi</span>(); <span class=\"comment\">// 输出 undefined（浏览器中 window.name 为空）</span></span><br></pre></td></tr></table></figure><br>    6. DOM 事件中的 this<br>    在 DOM 事件处理函数中，this 指向 触发事件的元素<br>    <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// 输出 &lt;button&gt; 元素</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><br>    <code>this绑定规则优先级： new &gt; 显示 &gt; 隐式 &gt; 默认</code>    </p>\n<h2 id=\"2-JS柯里化函数\"><a href=\"#2-JS柯里化函数\" class=\"headerlink\" title=\"2.JS柯里化函数\"></a>2.JS柯里化函数</h2><p>  1.什么是柯里化函数？（Currying）<br>  柯里化是一种将多参数函数转换成一系列单参数函数的技术，它让函数变得更灵活、更易于组合。</p>\n<p>  2.柯里化的核心特点：</p>\n<ul>\n<li>参数分解：每次只接受一个参数，返回新函数处理后续参数<br>多参数 -&gt; 单参数序列</li>\n<li>延迟执行（直到所有参数收集完毕才执行最终计算）、复用性、组合性</li>\n</ul>\n<p>  3.柯里化的实际用途：</p>\n<ul>\n<li>参数复用,动态创建函数，函数组合  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建通用的&quot;问候&quot;函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">greet</span> = (<span class=\"params\">greeting</span>) =&gt; <span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> <span class=\"string\">`<span class=\"subst\">$&#123;greeting&#125;</span>, <span class=\"subst\">$&#123;name&#125;</span>!`</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sayHello = <span class=\"title function_\">greet</span>(<span class=\"string\">&#x27;Hello&#x27;</span>);</span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>(<span class=\"string\">&#x27;Alice&#x27;</span>); <span class=\"comment\">// &quot;Hello, Alice!&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">sayHello</span>(<span class=\"string\">&#x27;Bob&#x27;</span>);   <span class=\"comment\">// &quot;Hello, Bob!&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>  4.柯里化函数实现步骤：</p>\n<ol>\n<li>定义一个接受多个参数的函数</li>\n<li>定义一个返回值为一个函数的函数，接收一个参数（也可接受多个，但是接受多个那为啥还要用柯里化呢）  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 普通加法函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\">a, b, c</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 柯里化转换函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">curry</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">function</span> <span class=\"title function_\">curried</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (args.<span class=\"property\">length</span> &gt;= fn.<span class=\"property\">length</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> fn.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\">...args2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> curried.<span class=\"title function_\">apply</span>(<span class=\"variable language_\">this</span>, args.<span class=\"title function_\">concat</span>(args2));</span><br><span class=\"line\">      &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> curriedAdd = <span class=\"title function_\">curry</span>(add);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">curriedAdd</span>(<span class=\"number\">1</span>)(<span class=\"number\">2</span>)(<span class=\"number\">3</span>)); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"3-什么是闭包？\"><a href=\"#3-什么是闭包？\" class=\"headerlink\" title=\"3.什么是闭包？\"></a>3.什么是闭包？</h2><p>  闭包就是一个函数可以访问其外部函数及其词法作用域内的变量。 </p>\n<h2 id=\"4-深入剖析-useEffect-依赖项数组\"><a href=\"#4-深入剖析-useEffect-依赖项数组\" class=\"headerlink\" title=\"4.深入剖析 useEffect 依赖项数组\"></a>4.深入剖析 useEffect 依赖项数组</h2><p>  useEffect是一个函数式Hook，允许我们在函数式组件中做一些副作用操作（数据获取、设置订阅、手动更新DOM操作等），依赖项数组是第二个参数，主要作用是控制useEffect的执行时机，只有当数组中的值发生变化时，useEffect才会执行。</p>\n<p>  如果没有传递第二个参数，useEffect在首次渲染和之后的每次更新时，都会执行一次定义个回调函数。</p>\n<p>  如果传递空数组[]，useEffect只会在组件首次渲染时执行一次回调函数，不会在组件更新时执行。如果返回了一个清理函数，那么也会在组件卸载时执行一次。</p>\n<p>  问：useEffect 的回调函数可以是 async？为什么？<br>  答：不可以。async 函数隐式返回 promise,useEffect 期望回调不返回或者返回清理函数，promise 会被当做清理函数。</p>\n<p>  问：如何在useEffect中执行异步操作，比如获取数据？<br>  答：在回调函数内部定义一个async函数，然后立即调用它，这样就能确保useEffect接收的回调是同步的，这个同步回调内部自己处理了异步操作。<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ✅ 正确写法：在 useEffect 内部定义并立即调用异步函数</span><br><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  // 1. 定义一个异步函数</span><br><span class=\"line\">  const fetchData = async () =&gt; &#123;</span><br><span class=\"line\">    const result = await myApi.fetch(&#x27;/api/data&#x27;);</span><br><span class=\"line\">    setData(result);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  // 2. 立即调用它</span><br><span class=\"line\">  fetchData();</span><br><span class=\"line\">&#125;, []); // 依赖项数组</span><br></pre></td></tr></table></figure><br>  然而，上面的基础写法忽略了一个重要问题：竞态条件（Race Condition）。</p>\n<p>  竞态条件（Race Condition） 指的是两个或多个操作（进程、线程、任务）竞争同一份资源，但最终的执行结果取决于它们执行的精确先后顺序，而这种顺序是不确定的，从而导致无法预测的、常常是错误的的行为。</p>\n<p>  如果组件在数据请求完成之前就被卸载了，或者 useEffect 因为 props 或 state 变化而再次执行，那么第一次请求返回后调用 setData 会更新一个已卸载的组件，导致 React 报内存泄漏警告。</p>\n<p>  因此，更专业、更完整的写法需要包含清理（Cancellation）机制。</p>\n<p>  方案一：使用标志位（Abort Flag）<br>  这是最经典的解决方案，利用组件卸载时 useEffect 的清理函数来阻止设置状态。</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  let isMounted = true; // 1. 定义一个标志位，表示组件是否挂载</span><br><span class=\"line\"></span><br><span class=\"line\">  const fetchData = async () =&gt; &#123;</span><br><span class=\"line\">    const result = await myApi.fetch(&#x27;/api/data&#x27;);</span><br><span class=\"line\">    if (isMounted) &#123; // 2. 只有在组件仍挂载时才更新状态</span><br><span class=\"line\">      setData(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData();</span><br><span class=\"line\"></span><br><span class=\"line\">  return () =&gt; &#123;</span><br><span class=\"line\">    isMounted = false; // 3. 清理函数：组件卸载时将标志位设为 false</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure>\n\n<p>  方案二：使用 AbortController（现代浏览器和 Node.js 支持）<br>  对于真正的网络请求（如 fetch），你可以使用 AbortController 来直接取消请求。<br>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  const abortController = new AbortController(); // 1. 创建控制器</span><br><span class=\"line\"></span><br><span class=\"line\">  const fetchData = async () =&gt; &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      const response = await fetch(&#x27;/api/data&#x27;, &#123;</span><br><span class=\"line\">        signal: abortController.signal, // 2. 将信号注入请求</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      const result = await response.json();</span><br><span class=\"line\">      setData(result);</span><br><span class=\"line\">    &#125; catch (error) &#123;</span><br><span class=\"line\">      if (error.name === &#x27;AbortError&#x27;) &#123;</span><br><span class=\"line\">        console.log(&#x27;请求被取消&#x27;); // 捕获因取消产生的错误</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        // 处理其他真正的错误</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  fetchData();</span><br><span class=\"line\"></span><br><span class=\"line\">  return () =&gt; &#123;</span><br><span class=\"line\">    abortController.abort(); // 3. 清理函数：取消进行中的请求</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;, []);</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"5-useTransition-和-useDeferredValue-如何优化用户体验？有何区别？\"><a href=\"#5-useTransition-和-useDeferredValue-如何优化用户体验？有何区别？\" class=\"headerlink\" title=\"5.useTransition 和 useDeferredValue 如何优化用户体验？有何区别？\"></a>5.<code>useTransition</code> 和 <code>useDeferredValue</code> 如何优化用户体验？有何区别？</h2><ul>\n<li><code>useTransition</code>: 标记“不那么紧急”的更新<br>  允许将状态更新标记为过渡（transition），降低其优先级<br>  返回<code>isPending</code>（布尔值，表示过渡是否待处理）和<code>startTransition</code>（函数，用于启动过渡，包裹低优先级状态更新）</li>\n<li><code>useDeferredValue</code>: 获取一个“延迟”的值<br>  接受一个值，并返回该值的“延迟”版本，只有当组件紧急更新（比如用户输入）完成后才会更新<br>  核心：提供一个值的“副本”，此副本的更新被推迟，以避免阻塞主渲染进程</li>\n<li><code>useTransition</code>应用场景：搜索 筛选大型列表<br>  因为你在搜索框输入的时候，应该是优先级最高的，比如你在输入时，搜索框底下的列表这时候开始渲染，但是你突然删除了之前的输入框搜索值，重新输入其它值搜索，假如你之前搜索的是一个很大的列表，你肯定不想看到旧的搜索结果还在渲染，你想获取最新的列表，这是就需要将搜索列表设为低优先级。  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [inputValue, setInputValue] = useState(&#x27;&#x27;);</span><br><span class=\"line\">const [searchTerm, setSearchTerm] = useState(&#x27;&#x27;);</span><br><span class=\"line\">const [isPending, startTransiton] = useTransition();</span><br><span class=\"line\"></span><br><span class=\"line\">const handleChange = (e) =&gt; &#123;</span><br><span class=\"line\">  setInputValue(e.target.value); //立即更新</span><br><span class=\"line\">  startTransition(() =&gt; &#123;</span><br><span class=\"line\">    setSearchTerm(e.target.value); //延迟更新</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><code>useDeferredValue</code>应用场景：外部数据源的图表可视化<br>  图标组件接受频繁更新的data的prop，导致重绘耗时，引发卡顿。这可能就无法控制父组件更新data的时机。<br>  首选<code>useDeferredValue</code>:用于获取data prop的一个延迟版本  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Chart(&#123; data &#125;) &#123;</span><br><span class=\"line\">  const deferredData = useDeferredValue(data); // 获取延迟版本</span><br><span class=\"line\">  // 使用 deferredData 进行渲染</span><br><span class=\"line\">  return &lt;ExpensiveChartRender data=&#123;deferredData&#125; /&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n  关键区别：<code>useTransition</code>作用于状态更新的过程。<br>  <code>useDeferredValue</code>作用于一个具体的值。</li>\n</ul>\n<h2 id=\"6-React中的“状态提升”：优缺点是什么？它的边界在哪里？\"><a href=\"#6-React中的“状态提升”：优缺点是什么？它的边界在哪里？\" class=\"headerlink\" title=\"6.React中的“状态提升”：优缺点是什么？它的边界在哪里？\"></a>6.React中的“状态提升”：优缺点是什么？它的边界在哪里？</h2><p>  核心思想：当多个组件要共享或反应同一份变化的数据时，将共享状态移至这些组件最近的共同父组件中。</p>\n<p>  目的：1.这些组件都可以访问同一个数据源<br>       2.使多个组件可以反应相同的数据变化<br>       3.保持数据流的单向性与可预测性 </p>\n<p>  缺点：1.Prop Drilling(属性逐层传递)：状态可能需要通过许多中间层组件传递;中间组件被迫接受并传递他们本身并不需要的props.<br>  2.父组件膨胀：最近的共同父组件可能承载过多无关状态和逻辑，变得臃肿。<br>  3.潜在的性能问题：父组件状态更新可能导致所有子组件重新渲染，导致性能问题，需配合React.memo等优化。</p>\n<p>  边界：适用场景：组件层级关系相对简单，少数几个组件共享状态，逻辑清晰，易于维护。但是碰到层级过深或全局状态等复杂场景就不适用了。<br>  替代方案：Context API、状态管理库（Redux、Zustand、Jotai等）</p>\n<h2 id=\"7-如何用-useContext-useReducer-实现一个轻量级的状态管理器？\"><a href=\"#7-如何用-useContext-useReducer-实现一个轻量级的状态管理器？\" class=\"headerlink\" title=\"7.如何用 useContext + useReducer 实现一个轻量级的状态管理器？\"></a>7.如何用 <code>useContext + useReducer</code> 实现一个轻量级的状态管理器？</h2><pre><code>useReducer: useState 的替代方案，适用于更复杂的状态逻辑。\n</code></pre>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n"},{"title":"常用快捷键","cover":"https://img.090227.xyz/file/ae62475a131f3734a201c.png","swiper_index":10,"top_group_index":10,"background":"#fff","date":"2025-08-18T16:56:46.000Z","updated":"2025-08-19T21:52:49.747Z","keywords":null,"description":null,"top":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"\n# 常用快捷键\n\n## vocode快捷键\n\n全局替换：Ctrl+Shift+H\n\n全局搜索文件：Ctrl + P\n\n重构：F2 （万能重命名。修改变量、函数、类名等，所有引用处同步更改）\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","source":"_posts/常用快捷键.md","raw":"---\ntitle: 常用快捷键\ncover: https://img.090227.xyz/file/ae62475a131f3734a201c.png\nswiper_index: 10\ntop_group_index: 10\nbackground: '#fff'\ndate: 2025-08-19 00:56:46\nupdated:\ntags:\ncategories:\nkeywords:\ndescription:\ntop:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n\n# 常用快捷键\n\n## vocode快捷键\n\n全局替换：Ctrl+Shift+H\n\n全局搜索文件：Ctrl + P\n\n重构：F2 （万能重命名。修改变量、函数、类名等，所有引用处同步更改）\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","slug":"常用快捷键","published":1,"layout":"post","photos":[],"_id":"cmewmp0ed000egs9o0bam12gm","content":"<h1 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h1><h2 id=\"vocode快捷键\"><a href=\"#vocode快捷键\" class=\"headerlink\" title=\"vocode快捷键\"></a>vocode快捷键</h2><p>全局替换：Ctrl+Shift+H</p>\n<p>全局搜索文件：Ctrl + P</p>\n<p>重构：F2 （万能重命名。修改变量、函数、类名等，所有引用处同步更改）</p>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h1><h2 id=\"vocode快捷键\"><a href=\"#vocode快捷键\" class=\"headerlink\" title=\"vocode快捷键\"></a>vocode快捷键</h2><p>全局替换：Ctrl+Shift+H</p>\n<p>全局搜索文件：Ctrl + P</p>\n<p>重构：F2 （万能重命名。修改变量、函数、类名等，所有引用处同步更改）</p>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n"},{"title":"用户中心管理系统","cover":"https://img.090227.xyz/file/ae62475a131f3734a201c.png","swiper_index":10,"top_group_index":10,"background":"#fff","date":"2025-08-17T15:52:41.000Z","updated":"2025-08-28T17:51:47.075Z","keywords":null,"description":null,"top":null,"top_img":null,"comments":1,"toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"ai":null,"_content":"\n# 从0到1建造用户中心管理系统（前端）\n\n利用 Ant Design Pro 框架创建前端工程\n\n## 初始化\n使用pro-cli脚手架快速初始化项目\n```\n# 使用 npm\nnpm i @ant-design/pro-cli -g\npro create myapp\n```\n## 配置代理\n可以在**config/proxy.ts**中配置代理\n```\ndev: {\n    // localhost:8000/api/** -> https://preview.pro.ant.design/api/**\n    '/api/': {\n      // 要代理的地址\n      target: 'http://localhost:8080',\n      // 配置了这个可以从 http 代理到 https\n      // 依赖 origin 的功能可能需要这个，比如 cookie\n      changeOrigin: true,\n    },\n  },\n```\n记得在api.ts中对应的request方法中的url参数里加上'/api/'前缀\n\n## 登录/注册页面\n核心逻辑代码 handleSubmit,用异步等待的方式调用登录接口，values是表单数据，作为登录方法的参数传入，然后做判断，如果成功，提示登录成功，调用fetchUserInfo方法获取用户信息，然后做重定向:\nconst urlParams = new URL(window.location.href).searchParams;\nwindow.location.href = urlParams.get('redirect') || '/';\nreturn;\n根据查询参数中的redirect值来决定用户重定向到哪个页面，如果没有redirect，则默认跳转主页。\n\n## 用户管理页面\n  columns对象定义了表格需要展示的每一项列名，与后端接口返回的字段名对应，dataIndex是后端接口返回的字段名，title是表格列名，copyable控制是否可以复制，ellipsis是否可以缩略，tooltip是提示信息，render是自定义渲染函数。\n  然后在导出的ProTable里传入columns像这样（columns = {columns}）就行了，然后传入request函数，在里面用异步等待写法定义searchUsers方法，在将其return，就可以在页面展示用户列表。\n\n\n\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","source":"_posts/用户中心管理系统.md","raw":"---\ntitle: 用户中心管理系统\ncover: https://img.090227.xyz/file/ae62475a131f3734a201c.png\nswiper_index: 10\ntop_group_index: 10\nbackground: '#fff'\ndate: 2025-08-17 23:52:41\nupdated:\ntags:\ncategories:\nkeywords:\ndescription:\ntop:\ntop_img:\ncomments:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nai:\n---\n\n# 从0到1建造用户中心管理系统（前端）\n\n利用 Ant Design Pro 框架创建前端工程\n\n## 初始化\n使用pro-cli脚手架快速初始化项目\n```\n# 使用 npm\nnpm i @ant-design/pro-cli -g\npro create myapp\n```\n## 配置代理\n可以在**config/proxy.ts**中配置代理\n```\ndev: {\n    // localhost:8000/api/** -> https://preview.pro.ant.design/api/**\n    '/api/': {\n      // 要代理的地址\n      target: 'http://localhost:8080',\n      // 配置了这个可以从 http 代理到 https\n      // 依赖 origin 的功能可能需要这个，比如 cookie\n      changeOrigin: true,\n    },\n  },\n```\n记得在api.ts中对应的request方法中的url参数里加上'/api/'前缀\n\n## 登录/注册页面\n核心逻辑代码 handleSubmit,用异步等待的方式调用登录接口，values是表单数据，作为登录方法的参数传入，然后做判断，如果成功，提示登录成功，调用fetchUserInfo方法获取用户信息，然后做重定向:\nconst urlParams = new URL(window.location.href).searchParams;\nwindow.location.href = urlParams.get('redirect') || '/';\nreturn;\n根据查询参数中的redirect值来决定用户重定向到哪个页面，如果没有redirect，则默认跳转主页。\n\n## 用户管理页面\n  columns对象定义了表格需要展示的每一项列名，与后端接口返回的字段名对应，dataIndex是后端接口返回的字段名，title是表格列名，copyable控制是否可以复制，ellipsis是否可以缩略，tooltip是提示信息，render是自定义渲染函数。\n  然后在导出的ProTable里传入columns像这样（columns = {columns}）就行了，然后传入request函数，在里面用异步等待写法定义searchUsers方法，在将其return，就可以在页面展示用户列表。\n\n\n\n\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","slug":"用户中心管理系统","published":1,"layout":"post","photos":[],"_id":"cmewmp0ed000ggs9o8pzh0m9x","content":"<h1 id=\"从0到1建造用户中心管理系统（前端）\"><a href=\"#从0到1建造用户中心管理系统（前端）\" class=\"headerlink\" title=\"从0到1建造用户中心管理系统（前端）\"></a>从0到1建造用户中心管理系统（前端）</h1><p>利用 Ant Design Pro 框架创建前端工程</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>使用pro-cli脚手架快速初始化项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 npm</span><br><span class=\"line\">npm i @ant-design/pro-cli -g</span><br><span class=\"line\">pro create myapp</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h2><p>可以在<strong>config&#x2F;proxy.ts</strong>中配置代理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev: &#123;</span><br><span class=\"line\">    // localhost:8000/api/** -&gt; https://preview.pro.ant.design/api/**</span><br><span class=\"line\">    &#x27;/api/&#x27;: &#123;</span><br><span class=\"line\">      // 要代理的地址</span><br><span class=\"line\">      target: &#x27;http://localhost:8080&#x27;,</span><br><span class=\"line\">      // 配置了这个可以从 http 代理到 https</span><br><span class=\"line\">      // 依赖 origin 的功能可能需要这个，比如 cookie</span><br><span class=\"line\">      changeOrigin: true,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>记得在api.ts中对应的request方法中的url参数里加上’&#x2F;api&#x2F;‘前缀</p>\n<h2 id=\"登录-注册页面\"><a href=\"#登录-注册页面\" class=\"headerlink\" title=\"登录&#x2F;注册页面\"></a>登录&#x2F;注册页面</h2><p>核心逻辑代码 handleSubmit,用异步等待的方式调用登录接口，values是表单数据，作为登录方法的参数传入，然后做判断，如果成功，提示登录成功，调用fetchUserInfo方法获取用户信息，然后做重定向:<br>const urlParams &#x3D; new URL(window.location.href).searchParams;<br>window.location.href &#x3D; urlParams.get(‘redirect’) || ‘&#x2F;‘;<br>return;<br>根据查询参数中的redirect值来决定用户重定向到哪个页面，如果没有redirect，则默认跳转主页。</p>\n<h2 id=\"用户管理页面\"><a href=\"#用户管理页面\" class=\"headerlink\" title=\"用户管理页面\"></a>用户管理页面</h2><p>  columns对象定义了表格需要展示的每一项列名，与后端接口返回的字段名对应，dataIndex是后端接口返回的字段名，title是表格列名，copyable控制是否可以复制，ellipsis是否可以缩略，tooltip是提示信息，render是自定义渲染函数。<br>  然后在导出的ProTable里传入columns像这样（columns &#x3D; {columns}）就行了，然后传入request函数，在里面用异步等待写法定义searchUsers方法，在将其return，就可以在页面展示用户列表。</p>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"从0到1建造用户中心管理系统（前端）\"><a href=\"#从0到1建造用户中心管理系统（前端）\" class=\"headerlink\" title=\"从0到1建造用户中心管理系统（前端）\"></a>从0到1建造用户中心管理系统（前端）</h1><p>利用 Ant Design Pro 框架创建前端工程</p>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>使用pro-cli脚手架快速初始化项目</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用 npm</span><br><span class=\"line\">npm i @ant-design/pro-cli -g</span><br><span class=\"line\">pro create myapp</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置代理\"><a href=\"#配置代理\" class=\"headerlink\" title=\"配置代理\"></a>配置代理</h2><p>可以在<strong>config&#x2F;proxy.ts</strong>中配置代理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dev: &#123;</span><br><span class=\"line\">    // localhost:8000/api/** -&gt; https://preview.pro.ant.design/api/**</span><br><span class=\"line\">    &#x27;/api/&#x27;: &#123;</span><br><span class=\"line\">      // 要代理的地址</span><br><span class=\"line\">      target: &#x27;http://localhost:8080&#x27;,</span><br><span class=\"line\">      // 配置了这个可以从 http 代理到 https</span><br><span class=\"line\">      // 依赖 origin 的功能可能需要这个，比如 cookie</span><br><span class=\"line\">      changeOrigin: true,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<p>记得在api.ts中对应的request方法中的url参数里加上’&#x2F;api&#x2F;‘前缀</p>\n<h2 id=\"登录-注册页面\"><a href=\"#登录-注册页面\" class=\"headerlink\" title=\"登录&#x2F;注册页面\"></a>登录&#x2F;注册页面</h2><p>核心逻辑代码 handleSubmit,用异步等待的方式调用登录接口，values是表单数据，作为登录方法的参数传入，然后做判断，如果成功，提示登录成功，调用fetchUserInfo方法获取用户信息，然后做重定向:<br>const urlParams &#x3D; new URL(window.location.href).searchParams;<br>window.location.href &#x3D; urlParams.get(‘redirect’) || ‘&#x2F;‘;<br>return;<br>根据查询参数中的redirect值来决定用户重定向到哪个页面，如果没有redirect，则默认跳转主页。</p>\n<h2 id=\"用户管理页面\"><a href=\"#用户管理页面\" class=\"headerlink\" title=\"用户管理页面\"></a>用户管理页面</h2><p>  columns对象定义了表格需要展示的每一项列名，与后端接口返回的字段名对应，dataIndex是后端接口返回的字段名，title是表格列名，copyable控制是否可以复制，ellipsis是否可以缩略，tooltip是提示信息，render是自定义渲染函数。<br>  然后在导出的ProTable里传入columns像这样（columns &#x3D; {columns}）就行了，然后传入request函数，在里面用异步等待写法定义searchUsers方法，在将其return，就可以在页面展示用户列表。</p>\n<div class=\"video-container\">\n[up主专用，视频内嵌代码贴在这]\n</div>\n\n<style>\n.video-container {\n    position: relative;\n    width: 100%;\n    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */\n}\n\n.video-container iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cmewmp0e30001gs9o60ewfsol","category_id":"cmewmp0e80004gs9oa3sxhyy7","_id":"cmewmp0ed000fgs9o4sup5pz3"},{"post_id":"cmewmp0ea0008gs9oaahh9g9h","category_id":"cmewmp0ec000ags9o5mt21xch","_id":"cmewmp0ee000igs9ohb81g215"}],"PostTag":[{"post_id":"cmewmp0e30001gs9o60ewfsol","tag_id":"cmewmp0e90005gs9o95s1f8va","_id":"cmewmp0ec000cgs9ohyw91ga9"},{"post_id":"cmewmp0ea0008gs9oaahh9g9h","tag_id":"cmewmp0ec000bgs9oe1fj5bll","_id":"cmewmp0ee000jgs9oa2jkhzo0"},{"post_id":"cmewmp0ea0008gs9oaahh9g9h","tag_id":"cmewmp0ee000hgs9oht5f1xrf","_id":"cmewmp0ee000kgs9ohhsth1nj"}],"Tag":[{"name":"技术","_id":"cmewmp0e90005gs9o95s1f8va"},{"name":"心理学","_id":"cmewmp0ec000bgs9oe1fj5bll"},{"name":"养生","_id":"cmewmp0ee000hgs9oht5f1xrf"}]}}